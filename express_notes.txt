
To stop node js server
==>control + c 

To install express js framework in the system
==>npm install express

****************************************************************************************************
To fetch express module and use its functions
example:-

const express = require('express');             //importing express module
const app = express();                          //creating an instance of express

app.use('/fake_path',express.static('public'));  //to use static files with virtual path as it is more secure

app.get('/get', (req, res) => {                 //using get method
    res.send('homepage access using get request through url');           //sending response to the client
});

app.post('/post', (req, res) => {               //using post method
  res.send('homepage access using post request through postman application');           //sending response to the client
});

app.get('/index', (req, res) => {                                                   //using get method
  res.sendFile( __dirname + '/index.html');     //sending response to the client
});


app.get('/get_variable_1/a/:var_a/b/:var_b', (req, res) => {                      //passing parameters using url get method
  res.send("showing variable passed through url: var_a = " + req.params.var_a + " , var_b = " + req.params.var_b); //showing url parameters on the client screen
});

// passing parameters when not necessery
app.get('/get_variable_2/a/:var_a?', (req, res) => { 
  if(req.params.var_a == undefined){
    res.send("parameter not passed");
  }else{
    res.send("use question mark if parameter is not mandatory: " + req.params.var_a); 
  }
});

// passing parameters using dash notation
app.get('/get_variable_3/:a-:b',(req,res)=>{                                 
  res.send("a = "+ req.params.a +" , b = "+ req.params.b);
});

// passing parameters using dash notation
app.get('/get_variable_4/:a?-:b?',(req,res)=>{                                 
  res.send("a = "+ req.params.a +" , b = "+ req.params.b);
});

// passing parameters using dot notation
app.get('/get_variable_5/:a.:b',(req,res)=>{                                 
  res.send("a = "+ req.params.a +" , b = "+ req.params.b);
});

// passing parameters using dot notation
app.get('/get_variable_6/:a?.:b?',(req,res)=>{                                 
  res.send("a = "+ req.params.a +" , b = "+ req.params.b);
});

// optional parameters are a or b or ab but cd is mandatory
app.get('/get_variable_7/a?b?cd',(req,res)=>{                                 
  res.send("a?b?cd");
});

// possible parameters abcd,abbcd,abbbcd 
app.get('/get_variable_8/ab+cd',(req,res)=>{                                 
  res.send("ab+cd");
});

// possible parameters abcd,abjasldjflacd 
app.get('/get_variable_9/ab*cd',(req,res)=>{                                 
  res.send("ab*cd but middle parameter is: " + req.params[0]);
});

// possible parameters abcd,abjasldjflacd 
app.get('/get_variable_10/ab(*)cd',(req,res)=>{                                 
  res.send("ab*cd but middle parameter is: " + req.params[0]);
});

// possible parameters are words ending with fly keyword 
app.get(/.*fly$/,(req,res)=>{                                 
  res.send("only parameters ending with fly are accepted");
});


var middleware_1 = function(req,res,next){
  console.log("middleware_1 is also working");
  next();
}                             //middleware_1 is defined here      
app.use(middleware_1);        //middleware_1 will work for all types of get requests


var middleware_2 = function(req,res,next){
  console.log("middleware_2 is working");
  next();
}                                                      //middleware_2 is defined here      
app.get('/middleware_2', middleware_2, (req,res)=>{    //middleware_2 will be called from here                             
  res.send("<h1>middleware_2 will be called for this specific request</h1>");
});


var middleware_3 = function(req,res,next){
  if(req.params.name == 'ashwani kumar'){
    console.log("middleware_3 user_name is validated");
  }else{
    console.log("middleware_3 user_name is not validated");
  }  
  next();
}                                                             //middleware_3 is defined here      
app.get('/middleware_3/:name?', middleware_3, (req,res)=>{    //middleware_3 will be called from here                             
  res.send("<h1>middleware_3 will be called and username is passed to middleware_3</h1>");
});

----------------------------------------------------------------
we can define middleware in other file and import using require keyword 
for example:-

1. let a file named all-middleware.js is created with code as follows:
==> module.exports = function (options) {
        return function(req,res,next){
        console.log("external middleware working");
        next();
    }}
    
2. importing external middleware and using for all url requests in main.js
==> var all_middlewares = require('./all-middleware.js');
    app.use(all_middlewares({ option1:'1' , option2:'2' }));

-------------------------------------------------------------------------

//start server listening on port 3000
app.listen(3000, () => {                        
  console.log('server listening on port 3000!');
});

****************************************************************************************************
Use the application generator tool, express-generator, to quickly create an application skeleton.

To install express application generator globally
==>npm install express-generator -g

To get help on the express framework tool
==>express -h

To work on views there are many template engines available in express js like pug,ejs etc.

To install ejs view engine in the system 
==>express --view=ejs appname (for ejs template engine)
or
==>express --view=pug appname (for pug template engine)

To install pug template engine
==>npm install pug

To install ejs template engine
==>npm install ejs

To install twig template engine
==>npm install twig

after it install all npm dependencies in the pug or ejs app using this command:
==>npm install

To run the ejs or pug app if already inside the app directory
==>DEBUG=app_name:* npm start  (it will run at localhost:3000)

To install body-parser for working on post data using forms
==>npm install body-parser