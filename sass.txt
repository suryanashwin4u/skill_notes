                   sass	notes
--------------------------------------------------
Sass files has the ".scss" file extension.
Sass stands for Syntactically Awesome Stylesheet
Sass is a CSS pre-processor
Sass reduces repetition of CSS and therefore saves time
Sass lets you use features that do not exist in CSS, like variables, nested rules, mixins, imports, inheritance, built-in functions, and other stuff.
Sass pre-processor to convert Sass code into standard CSS.
Transpiling is a term for taking a source code written in one language and transform/translate it into another language.
Sass supports standard CSS comments /* comment */, and in addition it supports inline comments // comment
Sass is based on Ruby
Sass is platform independent
Install Sass :https://sass-lang.com/install
Sass variables are only available at the level of nesting where they are defined.
It could be wise to define all global variables in its own file, named "_globals.scss", and include the file with the @include keyword.
So, a partial Sass file is named with a leading underscore
@mixin directive lets you create CSS code that is to be reused throughout the website.
@include directive is created to let you use (include) the mixin.
--------------------------------------------------

//declaring values outside
$primary_1: #a2b9bc;

.main-header {
  background-color: $primary_1;
}

--------------------------------------------------
//declaring inner values for inside things

$myFont: Helvetica, sans-serif;
$myColor: red;
$myFontSize: 18px;
$myWidth: 680px;

body {
  font-family: $myFont;
  font-size: $myFontSize;
  color: $myColor;
}

#container {
  width: $myWidth;
}

--------------------------------------------------
//global variable

$myColor: red;

h1 {
  $myColor: green !global; //it becomes global now
  color: $myColor;
}

p {
  color: $myColor;
}

-------------------------------------------------
//nested css with html tags

nav {
  ul {
    margin: 0;
    padding: 0;
    list-style: none;
  }
  li {
    display: inline-block;
  }
  a {
    display: block;
    padding: 6px 12px;
    text-decoration: none;
  }
}

-------------------------------------------------
//nested with css properties

font: {
  family: Helvetica, sans-serif;
  size: 18px;
  weight: bold;
}

text: {
  align: center;
  transform: lowercase;
  overflow: hidden;
}

-------------------------------------------------
//importing external scss file

@import "reset";  //no need to write extension

body {
  font-family: Helvetica, sans-serif;
  font-size: 18px;
  color: red;
}

-------------------------------------------------
//importing external partial _colors.scss file

@import "colors";

body {
  font-family: Helvetica, sans-serif;
  font-size: 18px;
  color: $myBlue;
}

-------------------------------------------------
//lets you create CSS code that is to be reused throughout the website.
Hyphens and underscores are considered to be the same. This means that @mixin important-text { } and @mixin important_text { } are considered as the same mixin!
The @include directive is used to include a mixin.


@mixin important-text {
  color: red;
  font-size: 25px;
  font-weight: bold;
  border: 1px solid blue;
}

.danger {
  @include important-text;
  background-color: green;
}

//include other mixin
@mixin special-text {
  @include important-text;
  @include link;
  @include special-border;
}

/* Define mixin with two arguments */
@mixin bordered($color, $width) {
  border: $width solid $color;
}

.myArticle {
  @include bordered(blue, 1px);  // Call mixin with two values
}

.myNotes {
  @include bordered(red, 2px); // Call mixin with two values
}

@mixin bordered($color: blue, $width: 1px) {
  border: $width solid $color;
}

.myTips {
  
  @include bordered($color: orange);
}

@mixin transform($property) {
  -webkit-transform: $property;
  -ms-transform: $property;
  transform: $property;
}

.myBox {
  @include transform(rotate(20deg));
}

-------------------------------------------------

@extend directive lets you share a set of CSS properties from one selector to another.

.button-basic  {
  border: none;
  padding: 15px 30px;
  text-align: center;
  font-size: 16px;
  cursor: pointer;
}

.button-report  {
  @extend .button-basic;
  background-color: red;
}

.button-submit  {
  @extend .button-basic;
  background-color: green;
  color: white;
}

-------------------------------------------
sass string functions

quote(Hello world!)
Result: "Hello world!"

str-index("Hello world!", "H")
Result: 1

str-insert("Hello world!", " wonderful", 6)
Result: "Hello wonderful world!"

str-length("Hello world!")
Result: 12

str-slice("Hello world!", 2, 5)
Result: "ello"

to-lower-case("Hello World!")
Result: "hello world!"

to-upper-case("Hello World!")
Result: "HELLO WORLD!"

unique-id()
Result: tyghefnsv

unquote("Hello world!")
Result: Hello world!

------------------------------------
Sass Numeric Functions

abs(15)
Result: 15
abs(-15)
Result: 15

ceil(15.20)
Result: 16

comparable(15px, 10px)
Result: true
comparable(20mm, 1cm)
Result: true
comparable(35px, 2em)
Result: false

floor(15.80)
Result: 15

max(5, 7, 9, 0, -3, -7)
Result: 9

min(5, 7, 9, 0, -3, -7)
Result: -7

percentage(1.2)
Result: 120

random()
Result: 0.45673

random(6)
Result: 4

round(15.20)
Result: 15
round(15.80)
Result: 16

----------------------------------------
Sass lists are immutable (they cannot change)
The first list item in a list is at index 1, not 0.

append((a b c), d)
Result: a b c d
append((a b c), (d), comma)
Result: a, b, c, d


index(a b c, b)
Result: 2
index(a b c, f)
Result: null

is-bracketed([a b c])
Result: true
is-bracketed(a b c)
Result: false

join(a b c, d e f)
Result: a b c d e f
join((a b c), (d e f), comma)
Result: a, b, c, d, e, f
join(a b c, d e f, $bracketed: true)
Result: [a b c d e f]

length(a b c)
Result: 3

list-separator(a b c)
Result: "space"
list-separator(a, b, c)
Result: "comma"

nth(a b c, 3)
Result: c

set-nth(a b c, 2, x)
Result: a x c

zip(1px 2px 3px, solid dashed dotted, red green blue)
Result: 1px solid red, 2px dashed green, 3px dotted blue

-----------------------------------------
Map Functions
maps are immutable (they cannot change)

$font-sizes: ("small": 12px, "normal": 18px, "large": 24px)
map-get($font-sizes, "small")
Result: 12px

$font-sizes: ("small": 12px, "normal": 18px, "large": 24px)
map-has-key($font-sizes, "big")
Result: false

$font-sizes: ("small": 12px, "normal": 18px, "large": 24px)
map-keys($font-sizes)
Result: "small", "normal, "large"

$font-sizes: ("small": 12px, "normal": 18px, "large": 24px)
$font-sizes2: ("x-large": 30px, "xx-large": 36px)
map-merge($font-sizes, $font-sizes2)
Result: "small": 12px, "normal": 18px, "large": 24px, "x-large": 30px, "xx-large": 36px

$font-sizes: ("small": 12px, "normal": 18px, "large": 24px)
map-remove($font-sizes, "small")
Result: ("normal": 18px, "large": 24px)
map-remove($font-sizes, "small", "large")
Result: ("normal": 18px)

$font-sizes: ("small": 12px, "normal": 18px, "large": 24px)
map-values($font-sizes)
Result: 12px, 18px, 24px

-----------------------------------------------
Selector Functions

is-superselector("div", "div.myInput")
Result: true
is-superselector("div.myInput", "div")
Result: false
is-superselector("div", "div")
Result: true

selector-append("div", ".myInput")
Result: div.myInput
selector-append(".warning", "__a")
Result: .warning__a

selector-nest("ul", "li")
Result: ul li
selector-nest(".warning", "alert", "div")
Result: .warning div, alert div

selector-parse("h1 .myInput .warning")
Result: ('h1' '.myInput' '.warning')

selector-replace("p.warning", "p", "div")
Result: div.warning

selector-unify("myInput", ".disabled")
Result: myInput.disabled
selector-unify("p", "h1")
Result: null

simple-selectors("div.myInput")
Result: div, .myInput
simple-selectors("div.myInput:before")
Result: div, .myInput, :before

-----------------------------------------
Introspection Functions

