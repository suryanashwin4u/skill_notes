    	php notes from php manual
**********************************************
            php from w3school.com

//keywords are not case sensitive
<?php
ECHO "Hello World!<br>";
echo "Hello World!<br>";
EcHo "Hello World!<br>";
?>

//variables are case sensitive
<?php
$color = "red";
echo "My car is " . $color . "<br>";
echo "My house is " . $COLOR . "<br>";
echo "My boat is " . $coLOR . "<br>";
?>


Rules for PHP variables:
A variable starts with the $ sign, followed by the name of the variable
A variable name must start with a letter or the underscore character
A variable name cannot start with a number
A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )

<?php
$txt = "W3Schools.com";
echo "I love " . $txt . "!";
?>

$txt = "W3Schools.com";
echo "I love $txt!";
?>

PHP has three different variable scopes:
local
global
static

A variable declared outside a function has a GLOBAL SCOPE and can only be accessed outside a function:

<?php
$x = 5; // global scope
function myTest() {
  // using x inside this function will generate an error
  echo "<p>Variable x inside function is: $x</p>";
}
myTest();
echo "<p>Variable x outside function is: $x</p>";
?>


A variable declared within a function has a LOCAL SCOPE and can only be accessed within that function:
function myTest() {
  $x = 5; // local scope
  echo "<p>Variable x inside function is: $x</p>";
}
myTest();

// using x outside the function will generate an error
echo "<p>Variable x outside function is: $x</p>";
?>


global keyword is used to access a global variable from within a function.
<?php
$x = 5;
$y = 10;

function myTest() {
  global $x, $y;
  $y = $x + $y;
}

myTest();
echo $y; // outputs 15
?>


<?php
$x = 5;
$y = 10;

function myTest() {
  $GLOBALS['y'] = $GLOBALS['x'] + $GLOBALS['y'];
}

myTest();
echo $y; // outputs 15
?>

when a function is completed/executed, all of its variables are deleted. However, sometimes we want a local variable NOT to be deleted.
<?php
function myTest() {
  static $x = 0;
  echo $x;
  $x++;
}

myTest();
myTest();
myTest();
?>


echo has no return value while print has a return value of 1 so it can be used in expressions. echo can take multiple parameters (although such usage is rare) while print can take one argument. echo is marginally faster than print.

echo statement can be used with or without parentheses: echo or echo()

<?php
echo "This ", "string ", "was ", "made ", "with multiple parameters.";
echo "<h2>" . $txt1 . "</h2>";
echo "Study PHP at " . $txt2 . "<br>";
?>

print statement can be used with or without parentheses: print or print().

<?php
print "<h2>PHP is Fun!</h2>";
print "Hello world!<br>";
print "I'm about to learn PHP!";
?>

Rules for integers:
An integer must have at least one digit
An integer must not have a decimal point
An integer can be either positive or negative
Integers can be specified in: decimal (base 10), hexadecimal (base 16), octal (base 8), or binary (base 2) notation

The PHP var_dump() function returns the data type and value:
<?php
$x = 5985;
var_dump($x);
?>

classes and objects
<?php
class Car {
  public $color;
  public $model;
  public function __construct($color, $model) {
    $this->color = $color;
    $this->model = $model;
  }
  public function message() {
    return "My car is a " . $this->color . " " . $this->model . "!";
  }
}

$myCar = new Car("black", "Volvo");
echo $myCar -> message();
echo "<br>";
$myCar = new Car("red", "Toyota");
echo $myCar -> message();
?>


A variable of data type NULL is a variable that has no value assigned to it.

Tip: If a variable is created without a value, it is automatically assigned a value of NULL.

Variables can also be emptied by setting the value to NULL:
<?php
$x = "Hello world!";
$x = null;
var_dump($x);
?>

resource type is not an actual data type. It is the storing of a reference to functions and resources external to PHP.

<?php
echo strlen("Hello world!"); // outputs 12
echo str_word_count("Hello world!"); // outputs 2
echo strrev("Hello world!"); // outputs !dlrow olleH
echo strpos("Hello world!", "world"); // outputs 6
echo str_replace("world", "Dolly", "Hello world!"); // outputs Hello Dolly!
?>

predefined constants for integers:
PHP_INT_MAX - The largest integer supported
PHP_INT_MIN - The smallest integer supported
PHP_INT_SIZE -  The size of an integer in bytes

check if the type of a variable is integer:
is_int()
is_integer() - alias of is_int()
is_long() - alias of is_int()

<?php
$x = 5985;
var_dump(is_int($x));

$x = 59.85;
var_dump(is_int($x));
?>

predefined constants for floats (from PHP 7.2):
PHP_FLOAT_MAX - The largest representable floating point number
PHP_FLOAT_MIN - The smallest representable positive floating point number
- PHP_FLOAT_MAX - The smallest representable negative floating point number
PHP_FLOAT_DIG - The number of decimal digits that can be rounded into a float and back without precision loss
PHP_FLOAT_EPSILON - The smallest representable positive number x, so that x + 1.0 != 1.0

to check if the type of a variable is float:
is_float()
is_double() - alias of is_float()

<?php
$x = 10.365;
var_dump(is_float($x));
?>

to check if a numeric value is finite or infinite:
is_finite()
is_infinite()

<?php
$x = 1.9e411;
var_dump($x);
?>

NaN stands for Not a Number.
to check if a value is not a number:
is_nan();

<?php
$x = acos(8);
var_dump($x);
?>

is_numeric() function can be used to find whether a variable is numeric.
<?php
$x = 5985;
var_dump(is_numeric($x));

$x = "5985";
var_dump(is_numeric($x));

$x = "59.85" + 100;
var_dump(is_numeric($x));

$x = "Hello";
var_dump(is_numeric($x));
?>

The (int), (integer), or intval() function are often used to convert a value to an integer.
<?php
// Cast float to int
$x = 23465.768;
$int_cast = (int)$x;
echo $int_cast;

echo "<br>";

// Cast string to int
$x = "23465.768";
$int_cast = (int)$x;
echo $int_cast;
?>

<?php
echo(pi()); // returns 3.1415926535898
echo(min(0, 150, 30, 20, -8, -200));  // returns -200
echo(max(0, 150, 30, 20, -8, -200));  // returns 150
echo(abs(-6.7));  // returns 6.7
echo(sqrt(64));  // returns 8
echo(round(0.60));  // returns 1
echo(round(0.49));  // returns 0
echo(rand());
echo(rand(10, 100));
?>

<?php
define("GREETING", "Welcome to W3Schools.com!");
echo GREETING;
?>

<?php
define("GREETING", "Welcome to W3Schools.com!", true);
echo greeting;
?>

<?php
define("cars", [
  "Alfa Romeo",
  "BMW",
  "Toyota"
]);
echo cars[0];
?> 

Constants are automatically global and can be used across the entire script.
<?php
define("GREETING", "Welcome to W3Schools.com!");

function myTest() {
  echo GREETING;
}
myTest();
?>

**  Exponentiation  $x ** $y    Result of raising $x to the $y'th power 
<>  Not equal   $x <> $y    Returns true if $x is not equal to $y
<=> Spaceship   $x <=> $y   Returns an integer less than, equal to, or greater than zero, depending on if $x is less than, equal to, or greater than $y. Introduced in PHP 7.


and And $x and $y   True if both $x and $y are true 
or  Or  $x or $y    True if either $x or $y is true 
xor Xor $x xor $y   True if either $x or $y is true, but not both   
&&  And $x && $y    True if both $x and $y are true 
||  Or  $x || $y    True if either $x or $y is true 
!   Not !$x         True if $x is not true


.   Concatenation   $txt1 . $txt2   Concatenation of $txt1 and $txt2    
.=  Concatenation assignment    $txt1 .= $txt2  Appends $txt2 to $txt1


$x = expr1 ? expr2 : expr3

$x = expr1 ?? expr2 
The value of $x is expr1 if expr1 exists, and is not NULL.
If expr1 does not exist, or is NULL, the value of $x is expr2.

if ($t < "10") {
  echo "Have a good morning!";
} elseif ($t < "20") {
  echo "Have a good day!";
} else {
  echo "Have a good night!";
}


switch ($favcolor) {
  case "red":
    echo "Your favorite color is red!";
    break;
  case "blue":
    echo "Your favorite color is blue!";
    break;
  case "green":
    echo "Your favorite color is green!";
    break;
  default:
    echo "Your favorite color is neither red, blue, nor green!";
}


while($x <= 5) {
  echo "The number is: $x <br>";
  $x++;
}

do {
  echo "The number is: $x <br>";
  $x++;
} while ($x <= 5);


for ($x = 0; $x <= 100; $x+=10) {
  echo "The number is: $x <br>";
}


foreach ($colors as $value) {
  echo "$value <br>";
}


foreach($age as $x => $val) {
  echo "$x = $val<br>";
}


for ($x = 0; $x < 10; $x++) {
  if ($x == 4) {
    break;
  }
  echo "The number is: $x <br>";
}


for ($x = 0; $x < 10; $x++) {
  if ($x == 4) {
    continue;
  }
  echo "The number is: $x <br>";
}


while($x < 10) {
  if ($x == 4) {
    break;
  }
  echo "The number is: $x <br>";
  $x++;
}


while($x < 10) {
  if ($x == 4) {
    $x++;
    continue;
  }
  echo "The number is: $x <br>";
  $x++;
}


function familyName($fname, $year) {
  echo "$fname Refsnes. Born in $year <br>";
}
familyName("Hege", "1975");
familyName("Stale", "1978");
familyName("Kai Jim", "1983");


<?php 
declare(strict_types=1); // strict requirement
function addNumbers(int $a, int $b) {
  return $a + $b;
}
echo addNumbers(5, "5 days");
// since strict is enabled and "5 days" is not an integer, an error will be thrown
?>


<?php declare(strict_types=1); // strict requirement
function setHeight(int $minheight = 50) {
  echo "The height is : $minheight <br>";
}
setHeight(350);
setHeight(); // will use the default value of 50
setHeight(135);
setHeight(80);
?>

<?php declare(strict_types=1); // strict requirement
function sum(int $x, int $y) {
  $z = $x + $y;
  return $z;
}
echo "5 + 10 = " . sum(5, 10) . "<br>";
echo "7 + 13 = " . sum(7, 13) . "<br>";
echo "2 + 4 = " . sum(2, 4);
?>


<?php declare(strict_types=1); // strict requirement
function addNumbers(float $a, float $b) : float {
  return $a + $b;
}
echo addNumbers(1.2, 5.2);
?>


<?php declare(strict_types=1); // strict requirement
function addNumbers(float $a, float $b) : int {
  return (int)($a + $b);
}
echo addNumbers(1.2, 5.2);
?>

//updating variable value using reference operator
<?php
function add_five(&$value) {
  $value += 5;
}
$num = 2;
add_five($num);
echo $num;
?>


$cars = array("Volvo", "BMW", "Toyota");
echo "I like " . $cars[0] . ", " . $cars[1] . " and " . $cars[2] . ".";
echo count($cars);
for($x = 0; $x < $arrlength; $x++) {
  echo $cars[$x];
  echo "<br>";
}

$age = array("Peter"=>"35", "Ben"=>"37", "Joe"=>"43");
$age['Peter'] = "35";
$age['Ben'] = "37";
$age['Joe'] = "43";
echo "Peter is " . $age['Peter'] . " years old.";
foreach($age as $x => $x_value) {
  echo "Key=" . $x . ", Value=" . $x_value;
  echo "<br>";
}


$cars = array (
  array("Volvo",22,18),
  array("BMW",15,13),
  array("Saab",5,2),
  array("Land Rover",17,15)
);
echo $cars[0][0].": In stock: ".$cars[0][1].", sold: ".$cars[0][2].".<br>";

for ($row = 0; $row < 4; $row++) {
  echo "<p><b>Row number $row</b></p>";
  echo "<ul>";
  for ($col = 0; $col < 3; $col++) {
    echo "<li>".$cars[$row][$col]."</li>";
  }
  echo "</ul>";
}


sort() - sort arrays in ascending order
rsort() - sort arrays in descending order
asort() - sort associative arrays in ascending order, according to the value
ksort() - sort associative arrays in ascending order, according to the key
arsort() - sort associative arrays in descending order, according to the value
krsort() - sort associative arrays in descending order, according to the key

sort($cars);
sort($numbers);
rsort($cars);
rsort($numbers);
asort($age);
ksort($age);
arsort($age);
krsort($age);


<?php
$x = 75;
$y = 25;
function addition() {
  $GLOBALS['z'] = $GLOBALS['x'] + $GLOBALS['y'];
}
addition();
echo $z;
?>


$_SERVER['PHP_SELF']    
==>Returns the filename of the currently executing script
$_SERVER['GATEWAY_INTERFACE']   
==>Returns the version of the Common Gateway Interface (CGI) the server is using
$_SERVER['SERVER_ADDR'] 
==>Returns the IP address of the host server
$_SERVER['SERVER_NAME'] 
==>Returns the name of the host server (such as www.w3schools.com)
$_SERVER['SERVER_SOFTWARE'] 
==>Returns the server identification string (such as Apache/2.2.24)
$_SERVER['SERVER_PROTOCOL'] 
==>Returns the name and revision of the information protocol (such as HTTP/1.1)
$_SERVER['REQUEST_METHOD']  
==>Returns the request method used to access the page (such as POST)
$_SERVER['REQUEST_TIME']    
==>Returns the timestamp of the start of the request (such as 1377687496)
$_SERVER['QUERY_STRING']    
==>Returns the query string if the page is accessed via a query string
$_SERVER['HTTP_ACCEPT'] 
==>Returns the Accept header from the current request
$_SERVER['HTTP_ACCEPT_CHARSET'] 
==>Returns the Accept_Charset header from the current request (such as utf-8,ISO-8859-1)
$_SERVER['HTTP_HOST']   
==>Returns the Host header from the current request
$_SERVER['HTTP_REFERER']    
==>Returns the complete URL of the current page (not reliable because not all user-agents support it)
$_SERVER['HTTPS']   
==>Is the script queried through a secure HTTP protocol
$_SERVER['REMOTE_ADDR'] 
==>Returns the IP address from where the user is viewing the current page
$_SERVER['REMOTE_HOST'] 
==>Returns the Host name from where the user is viewing the current page
$_SERVER['REMOTE_PORT'] 
==>Returns the port being used on the user's machine to communicate with the web server
$_SERVER['SCRIPT_FILENAME'] 
==>Returns the absolute pathname of the currently executing script
$_SERVER['SERVER_ADMIN']    
==>Returns the value given to the SERVER_ADMIN directive in the web server configuration file (if your script runs on a virtual host, it will be the value defined for that virtual host) (such as someone@w3schools.com)
$_SERVER['SERVER_PORT'] 
==>Returns the port on the server machine being used by the web server for communication (such as 80)
$_SERVER['SERVER_SIGNATURE']    
==>Returns the server version and virtual host name which are added to server-generated pages
$_SERVER['PATH_TRANSLATED'] 
==>Returns the file system based path to the current script
$_SERVER['SCRIPT_NAME'] 
==>Returns the path of the current script
$_SERVER['SCRIPT_URI']  
==>Returns the URI of the current page

<form method="post" action="<?php echo $_SERVER['PHP_SELF'];?>">
if ($_SERVER["REQUEST_METHOD"] == "POST") {
 $name = $_REQUEST['fname'];
  if (empty($name)) {}

if ($_SERVER["REQUEST_METHOD"] == "POST") {
  // collect value of input field
  $name = $_POST['fname'];
  if (empty($name)) {

<a href="test_get.php?subject=PHP&web=W3schools.com">Test $GET</a>

echo "Study " . $_GET['subject'] . " at " . $_GET['web'];

$exp = "/w3schools/i";
==>/ is the delimiter, w3schools is the pattern that is being searched for, and i is a modifier that makes the search case-insensitive.

The delimiter can be any character that is not a letter, number, backslash or space. The most common delimiter is the forward slash (/), but when your pattern contains forward slashes it is convenient to choose other delimiters such as # or ~.

preg_match()    
==>Returns 1 if the pattern was found in the string and 0 if not
preg_match_all()    
==>Returns the number of times the pattern was found in the string, which may also be 0
preg_replace()  
==>Returns a new string where matched patterns have been replaced with another string

$str = "Visit W3Schools";
$pattern = "/w3schools/i";
echo preg_match($pattern, $str); // Outputs 1

$str = "The rain in SPAIN falls mainly on the plains.";
$pattern = "/ain/i";
echo preg_match_all($pattern, $str); // Outputs 4

$str = "Visit Microsoft!";
$pattern = "/microsoft/i";
echo preg_replace($pattern, "W3Schools", $str); // Outputs "Visit W3Schools!"

$str = "Visit Microsoft!";
$pattern = "/microsoft/i";
echo preg_replace($pattern, "W3Schools", $str); // Outputs "Visit W3Schools!"

i   
==>Performs a case-insensitive search
m   
==>Performs a multiline search (patterns that search for the beginning or end of a string will match the beginning or end of each line)
u   
==>Enables correct matching of UTF-8 encoded patterns

[abc]   
==>Find one character from the options between the brackets
[^abc]
==>Find any character NOT between the brackets
[0-9]
==>Find one character from the range 0 to 9


|   
==>Find a match for any one of the patterns separated by | as in: cat|dog|fish
.   
==>Find just one instance of any character
^   
==>Finds a match as the beginning of a string as in: ^Hello
$   
==>Finds a match at the end of the string as in: World$
\d  
==>Find a digit
\s  
==>Find a whitespace character
\b  
==>Find a match at the beginning of a word like this: \bWORD, or at the end of a word like this: WORD\b
\uxxxx  
==>Find the Unicode character specified by the hexadecimal number xxxx


n+  
==>Matches any string that contains at least one n
n*  
==>Matches any string that contains zero or more occurrences of n
n?  
==>Matches any string that contains zero or one occurrences of n
n{x}    
==>Matches any string that contains a sequence of X n's
n{x,y}  
==>Matches any string that contains a sequence of X to Y n's
n{x,}   
==>Matches any string that contains a sequence of at least X n's



$str = "Apples and bananas.";
$pattern = "/ba(na){2}/i";
echo preg_match($pattern, $str); // Outputs 1


<form action="welcome.php" method="post">
Welcome <?php echo $_POST["name"]; ?><br>
Your email address is: <?php echo $_POST["email"]; ?>


<form action="welcome_get.php" method="get">
Welcome <?php echo $_GET["name"]; ?><br>
Your email address is: <?php echo $_GET["email"]; ?>

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
==>htmlspecialchars() function converts special characters to HTML entities. This means that it will replace HTML characters like < and > with &lt; and &gt;. This prevents attackers from exploiting the code by injecting HTML or Javascript code (Cross-site Scripting attacks) in forms.

XSS enables attackers to inject client-side script into Web pages viewed by other users.


$data = trim($data);
$data = stripslashes($data);
$data = htmlspecialchars($data);


if (!preg_match("/^[a-zA-Z-' ]*$/",$name)) {} //for name validation
if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {} //for email validation
if (!preg_match("/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i",$website)) {} //for url validation


d - Represents the day of the month (01 to 31)
m - Represents a month (01 to 12)
Y - Represents a year (in four digits)
l (lowercase 'L') - Represents the day of the week
Other characters, like"/", ".", or "-" can also be inserted between the characters to add additional formatting.

echo "Today is " . date("Y/m/d") . "<br>";
echo "Today is " . date("Y.m.d") . "<br>";
echo "Today is " . date("Y-m-d") . "<br>";
echo "Today is " . date("l");

&copy; 2010-<?php echo date("Y");?>   //copyright date

H - 24-hour format of an hour (00 to 23)
h - 12-hour format of an hour with leading zeros (01 to 12)
i - Minutes with leading zeros (00 to 59)
s - Seconds with leading zeros (00 to 59)
a - Lowercase Ante meridiem and Post meridiem (am or pm)

echo "The time is " . date("h:i:sa");

date_default_timezone_set("America/New_York");
echo "The time is " . date("h:i:sa");

$d=mktime(11, 14, 54, 8, 12, 2014);                 //return integer
echo "Created date is " . date("Y-m-d h:i:sa", $d); //return string

$d=strtotime("10:30pm April 15 2014");              //return string to int
echo "Created date is " . date("Y-m-d h:i:sa", $d); //return int to string

$d=strtotime("tomorrow");
echo date("Y-m-d h:i:sa", $d) . "<br>";

$d=strtotime("next Saturday");
echo date("Y-m-d h:i:sa", $d) . "<br>";

$d=strtotime("+3 Months");
echo date("Y-m-d h:i:sa", $d) . "<br>";

$startdate=strtotime("Saturday");
$enddate=strtotime("+6 weeks", $startdate);

$d1=strtotime("July 04");
$d2=ceil(($d1-time())/60/60/24);

require will produce a fatal error (E_COMPILE_ERROR) and stop the script
include will only produce a warning (E_WARNING) and the script will continue
Use require when the file is required by the application.
Use include when the file is not required and application should continue when file is not found.

include 'filename';
or
require 'filename';

echo readfile("webdictionary.txt");

$myfile = fopen("webdictionary.txt", "r") or die("Unable to open file!");
echo fread($myfile,filesize("webdictionary.txt"));  //read whole file
echo fgets($myfile);  //read single line

while(!feof($myfile)) { //check end of file
  echo fgets($myfile) . "<br>";
  echo fgetc($myfile);  //read character
}

$myfile = fopen("testfile.txt", "w"); //open a file in write mode
fwrite($myfile, $txt); //write into a file
fclose($myfile);

r	Open a file for read only. File pointer starts at the beginning of the file
w	Open a file for write only. Erases the contents of the file or creates a new file if it doesn't exist. File pointer starts at the beginning of the file
a	Open a file for write only. The existing data in file is preserved. File pointer starts at the end of the file. Creates a new file if the file doesn't exist
x	Creates a new file for write only. Returns FALSE and an error if file already exists
r+	Open a file for read/write. File pointer starts at the beginning of the file
w+	Open a file for read/write. Erases the contents of the file or creates a new file if it doesn't exist. File pointer starts at the beginning of the file
a+	Open a file for read/write. The existing data in file is preserved. File pointer starts at the end of the file. Creates a new file if the file doesn't exist
x+	Creates a new file for read/write. Returns FALSE and an error if file already exists


In your "php.ini" file, search for the file_uploads directive, and set it to On:

file_uploads = On

<?php
$target_dir = "uploads/";
$target_file = $target_dir . basename($_FILES["fileToUpload"]["name"]);
$uploadOk = 1;
$imageFileType = strtolower(pathinfo($target_file,PATHINFO_EXTENSION));
// Check if image file is a actual image or fake image
if(isset($_POST["submit"])) {
  $check = getimagesize($_FILES["fileToUpload"]["tmp_name"]);
  if($check !== false) {
    echo "File is an image - " . $check["mime"] . ".";
    $uploadOk = 1;
  } else {
    echo "File is not an image.";
    $uploadOk = 0;
  }
}
?>
$target_dir = "uploads/" - specifies the directory where the file is going to be placed
$target_file specifies the path of the file to be uploaded
$imageFileType holds the file extension of the file (in lower case)


// Check if file already exists
if (file_exists($target_file)) {
  echo "Sorry, file already exists.";
  $uploadOk = 0;
}

// Check file size
if ($_FILES["fileToUpload"]["size"] > 500000) {
  echo "Sorry, your file is too large.";
  $uploadOk = 0;
}

// Allow certain file formats
if($imageFileType != "jpg" && $imageFileType != "png" && $imageFileType != "jpeg"
&& $imageFileType != "gif" ) {
  echo "Sorry, only JPG, JPEG, PNG & GIF files are allowed.";
  $uploadOk = 0;
}

//file uploading code in php
<?php
$target_dir = "uploads/";
$target_file = $target_dir . basename($_FILES["fileToUpload"]["name"]);
$uploadOk = 1;
$imageFileType = strtolower(pathinfo($target_file,PATHINFO_EXTENSION));

// Check if image file is a actual image or fake image
if(isset($_POST["submit"])) {
  $check = getimagesize($_FILES["fileToUpload"]["tmp_name"]);
  if($check !== false) {
    echo "File is an image - " . $check["mime"] . ".";
    $uploadOk = 1;
  } else {
    echo "File is not an image.";
    $uploadOk = 0;
  }
}

// Check if file already exists
if (file_exists($target_file)) {
  echo "Sorry, file already exists.";
  $uploadOk = 0;
}

// Check file size
if ($_FILES["fileToUpload"]["size"] > 500000) {
  echo "Sorry, your file is too large.";
  $uploadOk = 0;
}

// Allow certain file formats
if($imageFileType != "jpg" && $imageFileType != "png" && $imageFileType != "jpeg"
&& $imageFileType != "gif" ) {
  echo "Sorry, only JPG, JPEG, PNG & GIF files are allowed.";
  $uploadOk = 0;
}

// Check if $uploadOk is set to 0 by an error
if ($uploadOk == 0) {
  echo "Sorry, your file was not uploaded.";
// if everything is ok, try to upload file
} else {
  if (move_uploaded_file($_FILES["fileToUpload"]["tmp_name"], $target_file)) {
    echo "The file ". htmlspecialchars( basename( $_FILES["fileToUpload"]["name"])). " has been uploaded.";
  } else {
    echo "Sorry, there was an error uploading your file.";
  }
}
?>

//pathinfo returns file information
print_r(pathinfo("/testweb/test.txt"));
Array
(
[dirname] => /testweb
[basename] => test.txt
[extension] => txt
)

setcookie($cookie_name, $cookie_value, time() + (86400 * 30), "/"); // 86400 = 1 day

if(!isset($_COOKIE[$cookie_name])) {
  echo "Cookie named '" . $cookie_name . "' is not set!";
} else {
  echo "Cookie '" . $cookie_name . "' is set!<br>";
  echo "Value is: " . $_COOKIE[$cookie_name];
}

Note: The setcookie() function must appear BEFORE the <html> tag.
Note: The value of the cookie is automatically URLencoded when sending the cookie, and automatically decoded when received (to prevent URLencoding, use setrawcookie() instead).

To modify a cookie, just set (again) the cookie using the setcookie() function:

To delete a cookie, use the setcookie() function with an expiration date in the past:
// set the expiration date to one hour ago
setcookie("user", "", time() - 3600);

//check if cookie is set
if(count($_COOKIE) > 0) {
  echo "Cookies are enabled.";
} else {
  echo "Cookies are disabled.";
}

<?php
// Start the session
session_start();
?>

<?php
// Set session variables
$_SESSION["favcolor"] = "green";
$_SESSION["favanimal"] = "cat";
echo "Session variables are set.";
?>

Note: The session_start() function must be the very first thing in your document. Before any HTML tags.

echo "Favorite color is " . $_SESSION["favcolor"] . ".<br>";
echo "Favorite animal is " . $_SESSION["favanimal"] . ".";

<?php
print_r($_SESSION);
?>

Most sessions set a user-key on the user's computer that looks something like this: 765487cf34ert8dede5a562e4f3a7e12. Then, when a session is opened on another page, it scans the computer for a user-key. If there is a match, it accesses that session, if not, it starts a new session.

<?php
// to change a session variable, just overwrite it
$_SESSION["favcolor"] = "yellow";
print_r($_SESSION);
?>

<?php
// remove all session variables
session_unset();

// destroy the session
session_destroy();
?>

<?php
  foreach (filter_list() as $id =>$filter) {
    echo '<tr><td>' . $filter . '</td><td>' . filter_id($filter) . '</td></tr>';
  }
?>

Validating data = Determine if the data is in proper form.

Sanitizing data = Remove any illegal character from the data.

$newstr = filter_var($str, FILTER_SANITIZE_STRING);
$num = filter_var($int, FILTER_VALIDATE_INT);
$ip_address = filter_var($ip, FILTER_VALIDATE_IP);
$email = filter_var($email, FILTER_SANITIZE_EMAIL);
$email = filter_var($email, FILTER_VALIDATE_EMAIL);
$url = filter_var($url, FILTER_VALIDATE_URL);
$url = filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6);               //return url or false
$url = filter_var($url, FILTER_VALIDATE_URL, FILTER_FLAG_QUERY_REQUIRED);   //return url or false
$newstr = filter_var($str, FILTER_SANITIZE_STRING, FILTER_FLAG_STRIP_HIGH); //return clean string


//arraymap(first argument will print,take string)
<?php
function my_callback($item) {
  return strlen($item);
}
$strings = ["apple", "orange", "banana", "coconut"];
$lengths = array_map("my_callback", $strings);                                //callback function is executed with every array iteration
$lengths = array_map( function($item) { return strlen($item); } , $strings);  //inline callback function
print_r($lengths);
?>

//(string,callback function(string))
<?php
function exclaim($str) {
  return $str . "! ";
}
printFormatted("Hello world", "exclaim");
?>

//convert into json for transfer
echo json_encode(array("Peter"=>35, "Ben"=>37, "Joe"=>43));
echo json_encode(array("Volvo", "BMW", "Toyota"));

//convert from json to object
$obj = json_decode('{"Peter":35,"Ben":37,"Joe":43}');
echo $obj->Peter; // 35

//convert from json to assosiative array
$arr = json_decode('{"Peter":35,"Ben":37,"Joe":43}',true);
echo $arr["Peter"];

//foreach works with object and array,assosiative array
foreach($obj as $key => $value) {  
  echo $key . " => " . $value . "<br>"; 
}



getMessage()	
==>Returns a string describing why the exception was thrown
getPrevious()
==>If this exception was triggered by another one, this method returns the previous exception. If not, then it returns null
getCode()
==>Returns the exception code
getFile()
==>Returns the full path of the file in which the exception was thrown
getLine()
==>Returns the line number of the line of code which threw the exception


<?php
function divide($dividend, $divisor) {
  if($divisor == 0) {
    throw new Exception("Division by zero", 1);
  }
  return $dividend / $divisor;
}
try {
  echo divide(5, 0);
} catch(Exception $ex) {
  $code = $ex->getCode();
  $message = $ex->getMessage();
  $file = $ex->getFile();
  $line = $ex->getLine();
  echo "Exception thrown in $file on line $line: [Code $code]
  $message";
}
?>

//classes and objects
<?php
class Fruit {
  // Properties
  public $name;
  public $color;

  // Methods
  function set_name($name) {
    $this->name = $name;
  }
  function get_name() {
    return $this->name;
  }
}

$apple = new Fruit();
$banana = new Fruit();
$apple->set_name('Apple');
$banana->set_name('Banana');

echo $apple->get_name();
echo $banana->get_name();
?>

//check class and objects relation
var_dump($apple instanceof Fruit);

//constructor and destructor
<?php
class Fruit {
 class Fruit {
  public $name;
  public $color;
  function __construct($name, $color) {
    $this->name = $name;
    $this->color = $color;
  }
  function __destruct() {
    echo "The fruit is {$this->name} and the color is {$this->color}.";
  }
}
$apple = new Fruit("Apple", "red");
?>


three access modifiers:
public 
==>the property or method can be accessed from everywhere. This is default
protected 
==>the property or method can be accessed within the class and by classes derived from that class
private 
==>the property or method can ONLY be accessed within the class

//restrictions on variables
<?php
class Fruit {
  public $name;
  protected $color;
  private $weight;
}

$mango = new Fruit();
$mango->name = 'Mango'; // OK
$mango->color = 'Yellow'; // ERROR
$mango->weight = '300'; // ERROR
?>

//restrictions on functions
<?php
class Fruit {
  public $name;
  public $color;
  public $weight;

  function set_name($n) {  // a public function (default)
    $this->name = $n;
  }
  protected function set_color($n) { // a protected function
    $this->color = $n;
  }
  private function set_weight($n) { // a private function
    $this->weight = $n;
  }
}

$mango = new Fruit();
$mango->set_name('Mango'); // OK
$mango->set_color('Yellow'); // ERROR
$mango->set_weight('300'); // ERROR
?>

//inheritence of public methods and functions
<?php
class Fruit {
  public $name;
  public $color;
  public function __construct($name, $color) {
    $this->name = $name;
    $this->color = $color; 
  }
  public function intro() {
    echo "The fruit is {$this->name} and the color is {$this->color}."; 
  }
}

class Strawberry extends Fruit {
  public function message() {
    echo "Am I a fruit or a berry? "; 
  }
}

$strawberry = new Strawberry("Strawberry", "red");
$strawberry->message();
$strawberry->intro();
?>

//protected members cant be accessed from outside the class
<?php
class Fruit {
  public $name;
  public $color;
  public function __construct($name, $color) {
    $this->name = $name;
    $this->color = $color; 
  }
  protected function intro() {
    echo "The fruit is {$this->name} and the color is {$this->color}."; 
  }
}
class Strawberry extends Fruit {
  public function message() {
    echo "Am I a fruit or a berry? "; 
    $this->intro();     //inherited protected works
  }
}
// Try to call all three methods from outside class
$strawberry = new Strawberry("Strawberry", "red");  // OK. __construct() is public
$strawberry->message(); // OK. message() is public
$strawberry->intro(); // ERROR. intro() is protected
?>

//overidding methods in inheritence
<?php
class Fruit {
  public $name;
  public $color;
  public function __construct($name, $color) {
    $this->name = $name;
    $this->color = $color; 
  }
  public function intro() {
    echo "The fruit is {$this->name} and the color is {$this->color}."; 
  }
}
class Strawberry extends Fruit {
  public $weight;
  public function __construct($name, $color, $weight) {
    $this->name = $name;
    $this->color = $color;
    $this->weight = $weight; 
  }
  public function intro() {
    echo "The fruit is {$this->name}, the color is {$this->color}, and the weight is {$this->weight} gram."; 
  }
}
$strawberry = new Strawberry("Strawberry", "red", 50);
$strawberry->intro();
?>

//final class cant be extended
<?php
final class Fruit {
}
class Strawberry extends Fruit {
  //error
}
?>


//final method cant be extended
<?php
class Fruit {
  final public function intro() {
    // some code
  }
}

class Strawberry extends Fruit {
  // will result in error
  public function intro() {
    // some code
  }
}
?>









Get system information from PHP
<?php phpinfo(); ?>

**********************************************

returns name of internet browser surfing internet
<?php
echo $_SERVER['HTTP_USER_AGENT'];
?>

**********************************************

strpos() is a function built into PHP which searches a string for another string.
 
 <?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== FALSE) {
    echo 'You are using Internet Explorer.<br />';
}
?>

**********************************************

htmlspecialchars() makes sure any characters that are special in html are properly encoded so people can't inject HTML tags or Javascript into your page.

<?php echo htmlspecialchars($_POST['name']); ?>

just convert it to an int which will automatically get rid of any stray characters.
<?php echo (int)$_POST['age']; ?>

use the $_REQUEST superglobal, if you do not care about the source of your request data. It contains the merged information of GET, POST and COOKIE data.

**********************************************

use the short echo tag to <?= 'print this string' ?>

<? echo 'this code is within short tags, but will only work '.'if short_open_tag is enabled'; ?>

**********************************************

Advanced escaping using conditions

<?php if ($expression == true): ?>
  This will show if the expression is true.
<?php else: ?>
  Otherwise this will show.
<?php endif; ?>

**********************************************

"one-line" comment styles only comment to the end of the line or the current block of PHP code

<h1>This is an <?php # echo 'simple';?> example</h1>

**********************************************
Four compound types:

array
object
callable
iterable
And finally two special types:

resource
NULL

bool value remains in capital form (TRUE / FALSE)

$a_bool = TRUE  // a boolean

**********************************************

returns type of data

echo gettype($a_bool); // prints out:  boolean

Note: To check the type and value of an expression, use the var_dump() function.

echo var_dump($a_bool);

**********************************************

it will check for integer

if (is_int($an_int)) {
    $an_int += 4;
}

**********************************************

it will check for string

if (is_string($a_bool)) {
    echo "String: $a_bool";
}

**********************************************



<?php
var_dump((bool) "");        // bool(false)
var_dump((bool) 1);         // bool(true)
var_dump((bool) -2);        // bool(true)
var_dump((bool) "foo");     // bool(true)
var_dump((bool) 2.3e5);     // bool(true)
var_dump((bool) array(12)); // bool(true)
var_dump((bool) array());   // bool(false)
var_dump((bool) "false");   // bool(true)
?>

**********************************************

<?php
$a = 1234; // decimal number
$a = 0123; // octal number (equivalent to 83 decimal)
$a = 0x1A; // hexadecimal number (equivalent to 26 decimal)
$a = 0b11111111; // binary number (equivalent to 255 decimal)
$a = 1_234_567; // decimal number (as of PHP 7.4.0)
?>

**********************************************

<?php
$large_number = 2147483647;
var_dump($large_number);                     // int(2147483647)

$large_number = 2147483648;
var_dump($large_number);                     // float(2147483648)

$million = 1000000;
$large_number =  50000 * $million;
var_dump($large_number);                     // float(50000000000)
?>

********************************************************************************************


                            REST API IN PHP
************************************************************************************
It stands for Representational State Transfer 
It supports all formats like json,xml,text,user-defined
------------------------------------------------------------------------------------
HTTP METHODS:

GET => READ DATA
PUT => UPDATE DATA
POST => INSERT OR CREATE DATA
DELETE => DELETE DATA
------------------------------------------------------------------------------------------------------

set this code at the top of the php file if it is receiving data in json format 
==> header('Content-Type:application/json');

if it is receiving data using any kind of http method
==> header('Access-Control-Allow-Methods:PUT/GET/POST/DELETE');

It is security related, anybody can access this page
==> header('Access-Control-Allow-Origin:*');

It is security related, only website can access this page
==> header('Access-Control-Allow-Origin:www.abcdef.com');

It is security related, only website can access this page
==> header('Access-Control-Allow-Headers:<header-name>'); //header-name can be any1 from above codes



