                SQL NOTES
******************************************
//select column syntax

==>SELECT column1, column2, ... FROM table_name;
----------------------------------------------
//select all columns from a table

==>SELECT * FROM table_name;
----------------------------------------------
//select only 2 columns from a table

==>SELECT CustomerName, City FROM Customers;
----------------------------------------------

******************************************
//select distinct columns syntax 

==>SELECT DISTINCT column1, column2, ... FROM table_name;
----------------------------------------------
//select only distinct values from a column in a table

==>SELECT DISTINCT Country FROM Customers;
----------------------------------------------
//select distict values from a table and then return count

==>SELECT COUNT(DISTINCT Country) FROM Customers;
----------------------------------------------

******************************************
// select columns using where conditions syntax

==>SELECT column1, column2, ... FROM table_name WHERE condition;
----------------------------------------------
//select those rows from the table where country is mexico

==>SELECT * FROM Customers WHERE Country='Mexico';
----------------------------------------------
//select all rows from the table where customerID is 1

==>SELECT * FROM Customers WHERE CustomerID=1;
----------------------------------------------
//select all rows from the table where price > 30

==>SELECT * FROM Products WHERE Price > 30;
----------------------------------------------
//select all rows from the table where price < 30

==>SELECT * FROM Products WHERE Price < 30;
----------------------------------------------
//select all rows from the table where price >= 30

==>SELECT * FROM Products WHERE Price >= 30;
----------------------------------------------
//select all rows from the table where price <= 30

==>SELECT * FROM Products WHERE Price <= 30;
----------------------------------------------
//select all rows from the table where price is not equal to 18

==>SELECT * FROM Products WHERE Price <> 18;
----------------------------------------------
//select all rows from the table where price comes between 50 and 60

==>SELECT * FROM Products WHERE Price BETWEEN 50 AND 60;
----------------------------------------------
//select all rows from the table where city name starts with letter 's'

==>SELECT * FROM Customers WHERE City LIKE 's%';
----------------------------------------------
//select all rows from the table where city name having paris and london

==>SELECT * FROM Customers WHERE City IN ('Paris','London');
**********************************************
//select rows from columns from a table where conditions with AND/OR/NOT operations matches

==>SELECT column1, column2, ... FROM table_name WHERE condition1 AND condition2 AND condition3 ...;

==>SELECT column1, column2, ... FROM table_name WHERE condition1 OR condition2 OR condition3 ...;

==>SELECT column1, column2, ... FROM table_name WHERE NOT condition;
----------------------------------------------
//select all columns rows from the table where country is germany and city is berlin

==>SELECT * FROM Customers WHERE Country='Germany' AND City='Berlin';
----------------------------------------------
//select all columns rows from the table where country is munchen or city is berlin

==>SELECT * FROM Customers WHERE City='Berlin' OR City='München';
----------------------------------------------
//select all columns rows from the table where country is not germany

==>SELECT * FROM Customers WHERE NOT Country='Germany';
----------------------------------------------
//select all columns rows from the table where country is germany and city may be berlin or munchen

==>SELECT * FROM Customers WHERE Country='Germany' AND (City='Berlin' OR City='München');
----------------------------------------------
//select all columns rows from the table where country is not germany and not usa

==>SELECT * FROM Customers WHERE NOT Country='Germany' AND NOT Country='USA';

******************************************
//select columns rows from table and order by columns in ascending or descending order

==>SELECT column1, column2, ... FROM table_name ORDER BY column1, column2, ... ASC|DESC;
---------------------------------------------
//select all columns rows from the table and order by country in ascending order by default

==>SELECT * FROM Customers ORDER BY Country;
---------------------------------------------
//select all columns rows from the table and order by country in descending order

==>SELECT * FROM Customers ORDER BY Country DESC;
---------------------------------------------
//select all columns rows from the table and order by country, if country are same then sort by customername in ascending order

==>SELECT * FROM Customers ORDER BY Country, CustomerName;
---------------------------------------------
//select all columns rows from the table and order by country in ascending order, customername in ascending order

==>SELECT * FROM Customers ORDER BY Country ASC, CustomerName DESC;
******************************************
//insert data into some columns if different order

==>INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...);
---------------------------------------------
//insert data into all columns if same order

==>INSERT INTO table_name VALUES (value1, value2, value3, ...);
---------------------------------------------
//insert data into table

==>INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country) VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');
------------------------------------------------------------


==>INSERT INTO Customers (CustomerName, City, Country) VALUES ('Cardinal', 'Stavanger', 'Norway');
------------------------------------------------------------

*******************************************

//return all rows containing null
SELECT column_names
FROM table_name
WHERE column_name IS NULL;

//return all rows which does not contain null
SELECT column_names
FROM table_name
WHERE column_name IS NOT NULL;
--------------------------------------------
examples:
SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NULL;
--------------------------------------------
SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NOT NULL;

******************************************
//update sql command
UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;
--------------------------------------------
example:
UPDATE Customers
SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'
WHERE CustomerID = 1;
--------------------------------------------
UPDATE Customers
SET ContactName='Juan';
--------------------------------------------

******************************************
//delete sql command
DELETE FROM table_name WHERE condition;
--------------------------------------------
example:
DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';
--------------------------------------------
DELETE FROM table_name;


******************************************
//limit sql command

SELECT column_name(s)
FROM table_name
WHERE condition
LIMIT number;

--------------------------------------------
example:
SELECT * FROM Customers LIMIT 3;
--------------------------------------------
SELECT * FROM Customers
WHERE Country='Germany'
LIMIT 3;


******************************************
//MIN() AND MAX() function

SELECT MIN(column_name)
FROM table_name
WHERE condition;

SELECT MAX(column_name)
FROM table_name
WHERE condition;

--------------------------------------------
example:

SELECT MIN(Price) AS SmallestPrice
FROM Products;
--------------------------------------------
SELECT MAX(Price) AS LargestPrice
FROM Products;

******************************************
//COUNT() function

SELECT COUNT(column_name)
FROM table_name
WHERE condition;

Example:
SELECT COUNT(ProductID)
FROM Products;

******************************************
//AVG() function 

SELECT AVG(column_name)
FROM table_name
WHERE condition;

example:
SELECT AVG(Price)
FROM Products;

******************************************
//SUM()

SELECT SUM(column_name)
FROM table_name
WHERE condition;

example:
SELECT SUM(Quantity)
FROM OrderDetails;

******************************************
//like pattern

SELECT column1, column2, ...
FROM table_name
WHERE columnN LIKE pattern;

LIKE Operator	                Description
WHERE CustomerName LIKE 'a%'	Finds any values that start with "a"
WHERE CustomerName LIKE '%a'	Finds any values that end with "a"
WHERE CustomerName LIKE '%or%'	Finds any values that have "or" in any position
WHERE CustomerName LIKE '_r%'	Finds any values that have "r" in the second position
WHERE CustomerName LIKE 'a_%'	Finds any values that start with "a" and are at least 2 characters in length
WHERE CustomerName LIKE 'a__%'	Finds any values that start with "a" and are at least 3 characters in length
WHERE ContactName LIKE 'a%o'	Finds any values that start with "a" and ends with "o"

example:
SELECT * FROM Customers
WHERE CustomerName LIKE 'a__%';

SELECT * FROM Customers
WHERE CustomerName NOT LIKE 'a%';

SELECT * FROM Customers
WHERE City LIKE 'L_n_on';

SELECT * FROM Customers
WHERE City LIKE 'ber%';

SELECT * FROM Customers
WHERE City LIKE '%es%';

SELECT * FROM Customers
WHERE City LIKE '_ondon';

SELECT * FROM Customers
WHERE City LIKE '[bsp]%';

SELECT * FROM Customers
WHERE City LIKE '[a-c]%';

SELECT * FROM Customers
WHERE City LIKE '[!bsp]%';

or

SELECT * FROM Customers
WHERE City NOT LIKE '[bsp]%';

******************************************
//IN operator

SELECT column_name(s)
FROM table_name
WHERE column_name IN (value1, value2, ...);

SELECT column_name(s)
FROM table_name
WHERE column_name IN (SELECT STATEMENT);

for example:
SELECT * FROM Customers
WHERE Country IN ('Germany', 'France', 'UK');

SELECT * FROM Customers
WHERE Country NOT IN ('Germany', 'France', 'UK');

SELECT * FROM Customers
WHERE Country IN (SELECT Country FROM Suppliers);
******************************************
//BETWEEN operator

SELECT column_name(s)
FROM table_name
WHERE column_name BETWEEN value1 AND value2;

example:
SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20;

SELECT * FROM Products
WHERE Price NOT BETWEEN 10 AND 20;

SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20
AND CategoryID NOT IN (1,2,3);

SELECT * FROM Products
WHERE ProductName BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'
ORDER BY ProductName;

SELECT * FROM Products
WHERE ProductName NOT BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'
ORDER BY ProductName;

SELECT * FROM Orders
WHERE OrderDate BETWEEN #07/01/1996# AND #07/31/1996#;

SELECT * FROM Orders
WHERE OrderDate BETWEEN '1996-07-01' AND '1996-07-31';

******************************************
As operator

//change column name
SELECT column_name AS alias_name
FROM table_name;

//change table name
SELECT column_name(s)
FROM table_name AS alias_name;

example:
SELECT CustomerID AS ID, CustomerName AS Customer
FROM Customers;

//concate columns as per given pattern
SELECT CustomerName, Address + ', ' + PostalCode + ' ' + City + ', ' + Country AS Address
FROM Customers;

SELECT o.OrderID, o.OrderDate, c.CustomerName
FROM Customers AS c, Orders AS o
WHERE c.CustomerName ='Around the Horn' AND c.CustomerID = o.CustomerID;

SELECT Orders.OrderID, Orders.OrderDate, Customers.CustomerName
FROM Customers, Orders
WHERE Customers.CustomerName='Around the Horn' AND Customers.CustomerID=Orders.CustomerID;

******************************************
//JOINS

SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate
FROM Orders
INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;


(INNER) JOIN: Returns records that have matching values in both tables
LEFT (OUTER) JOIN: Returns all records from the left table, and the matched records from the right table
RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched records from the left table
FULL (OUTER) JOIN: Returns all records when there is a match in either left or right table

SELECT column_name(s)
FROM table1
INNER JOIN table2
ON table1.column_name = table2.column_name;

SELECT Orders.OrderID, Customers.CustomerName
FROM Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;

SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName
FROM ((Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)
INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);

SELECT column_name(s)
FROM table1
LEFT JOIN table2
ON table1.column_name = table2.column_name;

SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
ORDER BY Customers.CustomerName;

SELECT column_name(s)
FROM table1
RIGHT JOIN table2
ON table1.column_name = table2.column_name;

SELECT Orders.OrderID, Employees.LastName, Employees.FirstName
FROM Orders
RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID
ORDER BY Orders.OrderID;

SELECT column_name(s)
FROM table1
FULL OUTER JOIN table2
ON table1.column_name = table2.column_name
WHERE condition;

SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
FULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID
ORDER BY Customers.CustomerName;

//self join
SELECT column_name(s)
FROM table1 T1, table1 T2
WHERE condition;


******************************************
//UNION

//use it for only distinct values
SELECT column_name(s) FROM table1
UNION
SELECT column_name(s) FROM table2;

.Every SELECT statement within UNION must have the same number of columns
.The columns must also have similar data types
.The columns in every SELECT statement must also be in the same order

//use it for all values
SELECT column_name(s) FROM table1
UNION ALL
SELECT column_name(s) FROM table2;

SELECT City, Country FROM Customers
WHERE Country='Germany'
UNION ALL
SELECT City, Country FROM Suppliers
WHERE Country='Germany'
ORDER BY City;


******************************************
//GROUPBY

GROUP BY statement is often used with aggregate functions (COUNT(), MAX(), MIN(), SUM(), AVG())

SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
ORDER BY column_name(s);

SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country;

SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
ORDER BY COUNT(CustomerID) DESC;


SELECT Shippers.ShipperName,COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders
LEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID
GROUP BY ShipperName;












