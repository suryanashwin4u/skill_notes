                SQL NOTES
******************************************

SELECT CAST(123 AS DECIMAL(5,2)) --returns 123.00
SELECT CAST(12345.12 AS NUMERIC(10,5)) --returns 12345.12000
SELECT CAST( PI() AS FLOAT) --returns 3.14159265358979
SELECT CAST( PI() AS REAL) --returns 3.141593
SELECT CAST(12345 AS BINARY(10)) -- 0x00000000000000003039
SELECT CAST(12345 AS VARBINARY(10)) -- 0x00003039
SELECT CAST('ABC' AS CHAR(10)) -- 'ABC ' (padded with spaces on the right)
SELECT CAST('ABC' AS VARCHAR(10)) -- 'ABC' (no padding due to variable character)
SELECT CAST('ABCDEFGHIJKLMNOPQRSTUVWXYZ' AS CHAR(10)) -- 'ABCDEFGHIJ' (truncated to 10 characters)


//select column syntax

==>SELECT column1, column2, ... FROM table_name;
----------------------------------------------
//select all columns from a table

==>SELECT * FROM table_name;
----------------------------------------------
//select only 2 columns from a table

==>SELECT CustomerName, City FROM Customers;
----------------------------------------------

******************************************
//select distinct columns syntax 

==>SELECT DISTINCT column1, column2, ... FROM table_name;
----------------------------------------------
//select only distinct values from a column in a table

==>SELECT DISTINCT Country FROM Customers;
----------------------------------------------
//select distict values from a table and then return count

==>SELECT COUNT(DISTINCT Country) FROM Customers;
----------------------------------------------

******************************************
// select columns using where conditions syntax

==>SELECT column1, column2, ... FROM table_name WHERE condition;
----------------------------------------------
//select those rows from the table where country is mexico

==>SELECT * FROM Customers WHERE Country='Mexico';
----------------------------------------------
//select all rows from the table where customerID is 1

==>SELECT * FROM Customers WHERE CustomerID=1;
----------------------------------------------
//select all rows from the table where price > 30

==>SELECT * FROM Products WHERE Price > 30;
----------------------------------------------
//select all rows from the table where price < 30

==>SELECT * FROM Products WHERE Price < 30;
----------------------------------------------
//select all rows from the table where price >= 30

==>SELECT * FROM Products WHERE Price >= 30;
----------------------------------------------
//select all rows from the table where price <= 30

==>SELECT * FROM Products WHERE Price <= 30;
----------------------------------------------
//select all rows from the table where price is not equal to 18

==>SELECT * FROM Products WHERE Price <> 18;
----------------------------------------------
//select all rows from the table where price comes between 50 and 60

==>SELECT * FROM Products WHERE Price BETWEEN 50 AND 60;
----------------------------------------------
//select all rows from the table where city name starts with letter 's'

==>SELECT * FROM Customers WHERE City LIKE 's%';
----------------------------------------------
//select all rows from the table where city name having paris and london

==>SELECT * FROM Customers WHERE City IN ('Paris','London');
**********************************************
//select rows from columns from a table where conditions with AND/OR/NOT operations matches

==>SELECT column1, column2, ... FROM table_name WHERE condition1 AND condition2 AND condition3 ...;

==>SELECT column1, column2, ... FROM table_name WHERE condition1 OR condition2 OR condition3 ...;

==>SELECT column1, column2, ... FROM table_name WHERE NOT condition;
----------------------------------------------
//select all columns rows from the table where country is germany and city is berlin

==>SELECT * FROM Customers WHERE Country='Germany' AND City='Berlin';
----------------------------------------------
//select all columns rows from the table where country is munchen or city is berlin

==>SELECT * FROM Customers WHERE City='Berlin' OR City='München';
----------------------------------------------
//select all columns rows from the table where country is not germany

==>SELECT * FROM Customers WHERE NOT Country='Germany';
----------------------------------------------
//select all columns rows from the table where country is germany and city may be berlin or munchen

==>SELECT * FROM Customers WHERE Country='Germany' AND (City='Berlin' OR City='München');
----------------------------------------------
//select all columns rows from the table where country is not germany and not usa

==>SELECT * FROM Customers WHERE NOT Country='Germany' AND NOT Country='USA';

******************************************
//select columns rows from table and order by columns in ascending or descending order

==>SELECT column1, column2, ... FROM table_name ORDER BY column1, column2, ... ASC|DESC;
---------------------------------------------
//select all columns rows from the table and order by country in ascending order by default

==>SELECT * FROM Customers ORDER BY Country;
---------------------------------------------
//select all columns rows from the table and order by country in descending order

==>SELECT * FROM Customers ORDER BY Country DESC;
---------------------------------------------
//select all columns rows from the table and order by country, if country are same then sort by customername in ascending order

==>SELECT * FROM Customers ORDER BY Country, CustomerName;
---------------------------------------------
//select all columns rows from the table and order by country in ascending order, customername in ascending order

==>SELECT * FROM Customers ORDER BY Country ASC, CustomerName DESC;
******************************************
//insert data into some columns if different order

==>INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...);
---------------------------------------------
//insert data into all columns if same order

==>INSERT INTO table_name VALUES (value1, value2, value3, ...);
---------------------------------------------
//insert data into table

==>INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country) VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');
------------------------------------------------------------


==>INSERT INTO Customers (CustomerName, City, Country) VALUES ('Cardinal', 'Stavanger', 'Norway');
------------------------------------------------------------

*******************************************

//return all rows containing null
SELECT column_names
FROM table_name
WHERE column_name IS NULL;

//return all rows which does not contain null
SELECT column_names
FROM table_name
WHERE column_name IS NOT NULL;
--------------------------------------------
examples:
SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NULL;
--------------------------------------------
SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NOT NULL;

******************************************
//update sql command
UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;
--------------------------------------------
example:
UPDATE Customers
SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'
WHERE CustomerID = 1;
--------------------------------------------
UPDATE Customers
SET ContactName='Juan';
--------------------------------------------

******************************************
//delete sql command
DELETE FROM table_name WHERE condition;
--------------------------------------------
example:
DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';
--------------------------------------------
DELETE FROM table_name;


******************************************
//limit sql command

SELECT column_name(s)
FROM table_name
WHERE condition
LIMIT number;

--------------------------------------------
example:
SELECT * FROM Customers LIMIT 3;
--------------------------------------------
SELECT * FROM Customers
WHERE Country='Germany'
LIMIT 3;


******************************************
//MIN() AND MAX() function

SELECT MIN(column_name)
FROM table_name
WHERE condition;

SELECT MAX(column_name)
FROM table_name
WHERE condition;

--------------------------------------------
example:

SELECT MIN(Price) AS SmallestPrice
FROM Products;
--------------------------------------------
SELECT MAX(Price) AS LargestPrice
FROM Products;

******************************************
//COUNT() function

SELECT COUNT(column_name)
FROM table_name
WHERE condition;

Example:
SELECT COUNT(ProductID)
FROM Products;

******************************************
//AVG() function 

SELECT AVG(column_name)
FROM table_name
WHERE condition;

example:
SELECT AVG(Price)
FROM Products;

******************************************
//SUM()

SELECT SUM(column_name)
FROM table_name
WHERE condition;

example:
SELECT SUM(Quantity)
FROM OrderDetails;

******************************************
//like pattern

SELECT column1, column2, ...
FROM table_name
WHERE columnN LIKE pattern;

LIKE Operator	                Description
WHERE CustomerName LIKE 'a%'	Finds any values that start with "a"
WHERE CustomerName LIKE '%a'	Finds any values that end with "a"
WHERE CustomerName LIKE '%or%'	Finds any values that have "or" in any position
WHERE CustomerName LIKE '_r%'	Finds any values that have "r" in the second position
WHERE CustomerName LIKE 'a_%'	Finds any values that start with "a" and are at least 2 characters in length
WHERE CustomerName LIKE 'a__%'	Finds any values that start with "a" and are at least 3 characters in length
WHERE ContactName LIKE 'a%o'	Finds any values that start with "a" and ends with "o"

example:
SELECT * FROM Customers
WHERE CustomerName LIKE 'a__%';

SELECT * FROM Customers
WHERE CustomerName NOT LIKE 'a%';

SELECT * FROM Customers
WHERE City LIKE 'L_n_on';

SELECT * FROM Customers
WHERE City LIKE 'ber%';

SELECT * FROM Customers
WHERE City LIKE '%es%';

SELECT * FROM Customers
WHERE City LIKE '_ondon';

SELECT * FROM Customers
WHERE City LIKE '[bsp]%';

SELECT * FROM Customers
WHERE City LIKE '[a-c]%';

SELECT * FROM Customers
WHERE City LIKE '[!bsp]%';

or

SELECT * FROM Customers
WHERE City NOT LIKE '[bsp]%';

******************************************
//IN operator

SELECT column_name(s)
FROM table_name
WHERE column_name IN (value1, value2, ...);

SELECT column_name(s)
FROM table_name
WHERE column_name IN (SELECT STATEMENT);

for example:
SELECT * FROM Customers
WHERE Country IN ('Germany', 'France', 'UK');

SELECT * FROM Customers
WHERE Country NOT IN ('Germany', 'France', 'UK');

SELECT * FROM Customers
WHERE Country IN (SELECT Country FROM Suppliers);
******************************************
//BETWEEN operator

SELECT column_name(s)
FROM table_name
WHERE column_name BETWEEN value1 AND value2;

example:
SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20;

SELECT * FROM Products
WHERE Price NOT BETWEEN 10 AND 20;

SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20
AND CategoryID NOT IN (1,2,3);

SELECT * FROM Products
WHERE ProductName BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'
ORDER BY ProductName;

SELECT * FROM Products
WHERE ProductName NOT BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'
ORDER BY ProductName;

SELECT * FROM Orders
WHERE OrderDate BETWEEN #07/01/1996# AND #07/31/1996#;

SELECT * FROM Orders
WHERE OrderDate BETWEEN '1996-07-01' AND '1996-07-31';

******************************************
As operator

//change column name
SELECT column_name AS alias_name
FROM table_name;

//change table name
SELECT column_name(s)
FROM table_name AS alias_name;

example:
SELECT CustomerID AS ID, CustomerName AS Customer
FROM Customers;

//concate columns as per given pattern
SELECT CustomerName, Address + ', ' + PostalCode + ' ' + City + ', ' + Country AS Address
FROM Customers;

SELECT o.OrderID, o.OrderDate, c.CustomerName
FROM Customers AS c, Orders AS o
WHERE c.CustomerName ='Around the Horn' AND c.CustomerID = o.CustomerID;

SELECT Orders.OrderID, Orders.OrderDate, Customers.CustomerName
FROM Customers, Orders
WHERE Customers.CustomerName='Around the Horn' AND Customers.CustomerID=Orders.CustomerID;

******************************************
//JOINS

SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate
FROM Orders
INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;


(INNER) JOIN: Returns records that have matching values in both tables
LEFT (OUTER) JOIN: Returns all records from the left table, and the matched records from the right table
RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched records from the left table
FULL (OUTER) JOIN: Returns all records when there is a match in either left or right table

SELECT column_name(s)
FROM table1
INNER JOIN table2
ON table1.column_name = table2.column_name;

SELECT Orders.OrderID, Customers.CustomerName
FROM Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;

SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName
FROM ((Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)
INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);

SELECT column_name(s)
FROM table1
LEFT JOIN table2
ON table1.column_name = table2.column_name;

SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
ORDER BY Customers.CustomerName;

SELECT column_name(s)
FROM table1
RIGHT JOIN table2
ON table1.column_name = table2.column_name;

SELECT Orders.OrderID, Employees.LastName, Employees.FirstName
FROM Orders
RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID
ORDER BY Orders.OrderID;

SELECT column_name(s)
FROM table1
FULL OUTER JOIN table2
ON table1.column_name = table2.column_name
WHERE condition;

SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
FULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID
ORDER BY Customers.CustomerName;

//self join
SELECT column_name(s)
FROM table1 T1, table1 T2
WHERE condition;


******************************************
//UNION

//use it for only distinct values
SELECT column_name(s) FROM table1
UNION
SELECT column_name(s) FROM table2;

.Every SELECT statement within UNION must have the same number of columns
.The columns must also have similar data types
.The columns in every SELECT statement must also be in the same order

//use it for all values
SELECT column_name(s) FROM table1
UNION ALL
SELECT column_name(s) FROM table2;

example:-
SELECT City, Country FROM Customers
WHERE Country='Germany'
UNION ALL
SELECT City, Country FROM Suppliers
WHERE Country='Germany'
ORDER BY City;

******************************************
//GROUPBY

GROUP BY statement is often used with aggregate functions (COUNT(), MAX(), MIN(), SUM(), AVG())

SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
ORDER BY column_name(s);

example:-
SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country;

SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
ORDER BY COUNT(CustomerID) DESC;

SELECT Shippers.ShipperName,COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders
LEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID
GROUP BY ShipperName;



******************************************
//HAVING Operator

SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
HAVING condition
ORDER BY column_name(s);

example:-
SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
HAVING COUNT(CustomerID) > 5
ORDER BY COUNT(CustomerID) DESC;

SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders
FROM (Orders
INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID)
GROUP BY LastName
HAVING COUNT(Orders.OrderID) > 10;

SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders
FROM Orders
INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID
WHERE LastName = 'Davolio' OR LastName = 'Fuller'
GROUP BY LastName
HAVING COUNT(Orders.OrderID) > 25;

******************************************
//EXISTS Operator

SELECT column_name(s)
FROM table_name
WHERE EXISTS
(SELECT column_name FROM table_name WHERE condition);

For example:-
SELECT SupplierName
FROM Suppliers
WHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price < 20);

SELECT SupplierName
FROM Suppliers
WHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price = 22);

******************************************
//ANY operator:

returns a boolean value as a result
returns TRUE if ANY of the subquery values meet the condition

SELECT column_name(s)
FROM table_name
WHERE column_name operator ANY
  (SELECT column_name
  FROM table_name
  WHERE condition);

operator must be a standard comparison operator (=, <>, !=, >, >=, <, or <=).

//ALL operator:

returns a boolean value as a result
returns TRUE if ALL of the subquery values meet the condition
is used with SELECT, WHERE and HAVING statements

SELECT column_name(s)
FROM table_name
WHERE column_name operator ALL
  (SELECT column_name
  FROM table_name
  WHERE condition);

example:-
SELECT ProductName 
FROM Products
WHERE ProductID = ANY (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);

SELECT ProductName
FROM Products
WHERE ProductID = ANY
  (SELECT ProductID
  FROM OrderDetails
  WHERE Quantity > 99);

SELECT ALL ProductName
FROM Products
WHERE TRUE;

SELECT ProductName
FROM Products
WHERE ProductID = ALL
  (SELECT ProductID
  FROM OrderDetails
  WHERE Quantity = 10);


******************************************
//SELECT INTO Syntax

SELECT *
INTO newtable [IN externaldb]
FROM oldtable
WHERE condition;

SELECT column1, column2, column3, ...
INTO newtable [IN externaldb]
FROM oldtable
WHERE condition;

example:-
SELECT * INTO CustomersBackup2017
FROM Customers;

SELECT * INTO CustomersBackup2017 IN 'Backup.mdb'
FROM Customers;

SELECT CustomerName, ContactName INTO CustomersBackup2017
FROM Customers;

SELECT * INTO CustomersGermany
FROM Customers
WHERE Country = 'Germany';

SELECT Customers.CustomerName, Orders.OrderID
INTO CustomersOrderBackup2017
FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID;

SELECT * INTO newtable
FROM oldtable
WHERE 1 = 0;

******************************************
//INSERT INTO Syntax

Copy all columns from one table to another table:

INSERT INTO table2
SELECT * FROM table1
WHERE condition;


Copy only some columns from one table into another table:
INSERT INTO table2 (column1, column2, column3, ...)
SELECT column1, column2, column3, ...
FROM table1
WHERE condition;


INSERT INTO Customers (CustomerName, City, Country)
SELECT SupplierName, City, Country FROM Suppliers;


INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
SELECT SupplierName, ContactName, Address, City, PostalCode, Country FROM Suppliers;

INSERT INTO Customers (CustomerName, City, Country)
SELECT SupplierName, City, Country FROM Suppliers
WHERE Country='Germany';

******************************************
//CASE Syntax

CASE
    WHEN condition1 THEN result1
    WHEN condition2 THEN result2
    WHEN conditionN THEN resultN
    ELSE result
END;

Example:-

SELECT OrderID, Quantity,
CASE
    WHEN Quantity > 30 THEN 'The quantity is greater than 30'
    WHEN Quantity = 30 THEN 'The quantity is 30'
    ELSE 'The quantity is under 30'
END AS QuantityText
FROM OrderDetails;

******************************************
//IFNULL(), ISNULL(), COALESCE(), and NVL() Functions


******************************************
//Stored Procedures


******************************************
//COMMENTS
Single line comments start with --.

Any text between -- and the end of the line will be ignored

SELECT * FROM Customers -- WHERE City='Berlin';

--SELECT * FROM Customers;

/*Select all the columns
of all the records
in the Customers table:*/

SELECT CustomerName, /*City,*/ Country FROM Customers;

SELECT * FROM Customers WHERE (CustomerName LIKE 'L%'
OR CustomerName LIKE 'R%' /*OR CustomerName LIKE 'S%'
OR CustomerName LIKE 'T%'*/ OR CustomerName LIKE 'W%')
AND Country='USA'
ORDER BY CustomerName;

******************************************
//create a new database
CREATE DATABASE databasename;

//show databases
SHOW DATABASES;

//drop database
DROP DATABASE databasename;

******************************************
//to take backup and save into disk
BACKUP DATABASE databasename
TO DISK = 'filepath';

//only backs up the parts of the database that have changed
BACKUP DATABASE databasename
TO DISK = 'filepath'
WITH DIFFERENTIAL;

******************************************
//create table
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    column3 datatype,
   ....
);

CREATE TABLE table_name (
    column1 datatype constraint,
    column2 datatype constraint,
    column3 datatype constraint,
    ....
);

constraints are commonly used in SQL:
NOT NULL - Ensures that a column cannot have a NULL value
UNIQUE - Ensures that all values in a column are different
PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
FOREIGN KEY - Prevents actions that would destroy links between tables
CHECK - Ensures that the values in a column satisfies a specific condition
DEFAULT - Sets a default value for a column if no value is specified
CREATE INDEX - Used to create and retrieve data from the database very quickly

examples:

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255) NOT NULL,
    Age int
);

ALTER TABLE Persons
MODIFY Age int NOT NULL;

CREATE TABLE Persons (
    ID int NOT NULL UNIQUE,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int
);

//add a constraint to a column
ALTER TABLE Persons
ADD UNIQUE (ID);

//drop a constraint from a column
ALTER TABLE Persons
DROP INDEX UC_Person;

//declaring primary key
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (ID)
);

//declaring primary key on many columns
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CONSTRAINT PK_Person PRIMARY KEY (ID,LastName)
);

//change column primary key
ALTER TABLE Persons
ADD PRIMARY KEY (ID);

//drop a primary key constraint column
ALTER TABLE Persons
DROP PRIMARY KEY;

//foreign key constraint
CREATE TABLE Orders (
    OrderID int NOT NULL,
    OrderNumber int NOT NULL,
    PersonID int,
    PRIMARY KEY (OrderID),
    FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
);

//change column constraint
ALTER TABLE Orders
ADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);

//drop column constraint
ALTER TABLE Orders
DROP FOREIGN KEY FK_PersonOrder;

//create table only if age column value is greater or more than 18
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CHECK (Age>=18)
);

//adding check constraint from a column
ALTER TABLE Persons
ADD CHECK (Age>=18);

//drop check constraint from a column
ALTER TABLE Persons
DROP CHECK CHK_PersonAge;

//set a column default constraint
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255) DEFAULT 'Sandnes'
);

//add a default constraint in existing table
ALTER TABLE Persons
ALTER City SET DEFAULT 'Sandnes';

//drop default constraint from a table
ALTER TABLE Persons
ALTER City DROP DEFAULT;

//create index constraint but duplicate values allowed
CREATE INDEX index_name
ON table_name (column1, column2, ...);

//Creates a unique index on a table. Duplicate values are not allowed:
CREATE UNIQUE INDEX index_name
ON table_name (column1, column2, ...);
 
//drop index constraint
ALTER TABLE table_name
DROP INDEX index_name;

//autoincrement constraint , it starts from 1
CREATE TABLE Persons (
    Personid int NOT NULL AUTO_INCREMENT,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (Personid)
);

//change table column to start numbering from 100
ALTER TABLE Persons AUTO_INCREMENT=100;

******************************************
//copying and create a new table

CREATE TABLE new_table_name AS
    SELECT column1, column2,...
    FROM existing_table_name
    WHERE ....;

******************************************
//drop a table

DROP TABLE table_name;
******************************************
//truncate table table name

TRUNCATE TABLE table_name;
******************************************
//add a column to existing table

ALTER TABLE table_name
ADD column_name datatype;
******************************************
//drop a column to existing table

ALTER TABLE table_name
DROP COLUMN column_name;
******************************************
//change column datatype

ALTER TABLE table_name
ALTER COLUMN column_name datatype;
******************************************
//date and time datatypes in mysql

DATE - format YYYY-MM-DD
DATETIME - format: YYYY-MM-DD HH:MI:SS
TIMESTAMP - format: YYYY-MM-DD HH:MI:SS
YEAR - format YYYY or YY

******************************************
//view is a virtual table based on the result-set of an SQL statement.

CREATE VIEW view_name AS
SELECT column1, column2, ...
FROM table_name
WHERE condition;

CREATE OR REPLACE VIEW view_name AS
SELECT column1, column2, ...
FROM table_name
WHERE condition;

DROP VIEW view_name;
******************************************
                SQL INJECTION
******************************************
code injection technique that might destroy your database,common web hacking techniques,placement of malicious code in SQL statements, via web page input.

Use SQL Parameters for Protection

SQL parameters are values that are added to an SQL query at execution time, in a controlled manner.

Note that parameters are represented in the SQL statement by a @ marker.

The SQL engine checks each parameter to ensure that it is correct for its column and are treated literally, and not as part of the SQL to be executed.

$stmt = $dbh->prepare("INSERT INTO Customers (CustomerName,Address,City)
VALUES (:nam, :add, :cit)");
$stmt->bindParam(':nam', $txtNam);
$stmt->bindParam(':add', $txtAdd);
$stmt->bindParam(':cit', $txtCit);
$stmt->execute();




