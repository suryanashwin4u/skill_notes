                       GIT NOTES
--------------------------------------------------------

git --version
=>check version of git installed in device

=======================================================

git config --global user.name "type username"
git config --global user.email "type email id"
=>globally declare your username and email to know who is commiting in the system

=======================================================

git init
=>initialize git in local project directory at first

=======================================================

git status
=>to know the changes happen and currently unstaged files in the local project directory

--------------------------------------------------------

Note: Short status flags are:
?? - Untracked files
A - Files added to stage
M - Modified files
D - Deleted files


git status --short
=>compact view to get idea of changes

=======================================================

git add file_name
=>to stage file where changes happened

git add --all
=>to stage all files where changes happened

git add .
=>to stage all files where changes happened

git add -A
=>to stage all files where changes happened

=======================================================

git commit -m "type changes happend in the file"
=>declare save point with message

git commit -a -m "type changes happend in the file"
=>declare save point with message for all files

======================================================

git log
=>to view the commits happens till now for a particular project
type q to come out again

======================================================

git command_name -help
=>See all the available options for the specific command

git help --all
=>See all possible commands

Note: If you find yourself stuck in the list view, SHIFT + G to jump the end of the list, then q to exit the view.

======================================================

With Git:

With a new branch called new-design, edit the code directly without impacting the main branch

EMERGENCY! There is an unrelated error somewhere else in the project that needs to be fixed ASAP!

Create a new branch from the main project called small-error-fix

Fix the unrelated error and merge the small-error-fix branch with the main branch

You go back to the new-design branch, and finish the work there

Merge the new-design branch with main (getting alerted to the small error fix that you were missing)

======================================================

git branch branch_name
=>create a new branch to update the code

git branch
=>to know list of branches


======================================================

git checkout branch_name
=>change working branch

Note: Using the -b option on checkout will create a new branch, and move to it, if it does not exist

git checkout -b newbranchname
=>create a new branch and move to it directly

======================================================
merging branches together

1.need to change to the original repository branch
2.now merge new branch code into original using git merge new_branch_name
3.But if there is some conflicts in merging then solve that conflicts and then commit

git merge new_branch_name
=>to merge new branch into the branch where you are present right now

======================================================

git branch -d newbranchname
=>to delete old branch


======================================================
working with github repository


add files from local drive to github repository

1.create a new repository at github.com
2.execute this command to push local repository to github:
    git remote add origin https://github.com/link......
3. push our master branch to the origin url, and set it as the default remote branch:
    git push --set-upstream origin master


git fetch origin
=>fetch the existing repository so that any updated wont be missed


git log origin/master
=>check the commits happened b4 you


git diff origin/master
=>we can also verify by showing the differences between our local master and origin/master


git merge origin/master
=>merge our current branch (master) with origin/master


git pull origin
=>Use pull to update our local Git

git commit -a -m "message"
=>commit all files directly without staging

git push origin
=>push files to remote repository

git push origin update-readme
=> push the branch from our local Git repository, to GitHub, where everyone can see the changes

git branch -a
=>returns all repository list at remote and local

git branch -r
=>returns all repositories at remote


git checkout -b new_rep_name
=>create a new local branch, and checkout direclty from one command


git add README.md
=>to add readme file

git remote rename origin newname
=>rename origin to new name

============================================================

fork (to contribute in someone else repository)

git clone https://github.com/w3schools-test/w3schools-test.github.io.git
=>to clone the fork to local drive

Note: To specify a specific folder to clone to, add the name of the folder after the repository URL, like this: git clone https://github.com/w3schools-test/w3schools-test.github.io.git myfolder

git remote -v
=>



===========================================================
revert changes

git log --oneline
=>returns short oneline all commits till now

git revert HEAD --no-edit
=> revert the latest commit using git revert HEAD (revert the latest change,  and then commit), adding the option --no-edit to skip the commit message editor (getting the default revert message)

Note: To revert to earlier commits, use git revert HEAD~x (x being a number. 1 going back one more, 2 going back two more, etc.)

git reset hashcode
=>return all files of previous commit having same hashcode as above

Warning: Messing with the commit history of a repository can be dangerous. It is usually ok to make these kinds of changes to your own local repository. However, you should avoid making changes that rewrite history to remote repositories, especially if others are working with them.


git commit --amend -m "Added lines to README.md"
=>ammend previous commit message

Warning: Messing with the commit history of a repository can be dangerous. It is usually ok to make these kinds of changes to your own local repository. However, you should avoid making changes that rewrite history to remote repositories, especially if others are working with them~

===================================================

secure git

To create a .gitignore file, go to the root of your local Git, and create it 
command: touch .gitignore

We are just going to add two simple rules:
1.Ignore any files with the .log extension
2.Ignore everything in any directory named temp

example:
# ignore ALL .log files
*.log

# ignore ALL files in ANY directory named temp
temp/

Now all .log files and anything in temp folders will be ignored by Git.


Note: In this case, we use a single .gitignore which applies to the entire repository.
It is also possible to have additional .gitignore files in subdirectories. These only apply to files or folders within that directory.

It is also possible to ignore files or folders but not show it in the distubuted .gitignore file.

These kinds of ignores are specified in the .git/info/exclude file. It works the same way as .gitignore but are not shown to anyone else.
============================================================

