                    git tutorials
*******************************************************
things to remember
=>take pull from branches before pushing code to this or another branch

search conflicts with find command
=>try searching <<< or >>>, if there is any conflict then it will show
=>if there is any conflict tell seniors
=======================================================
git --version
=>check version of git installed in device
=======================================================
git config --global user.name "type username"
git config --global user.email "type email id"
=>globally declare your username and email to know who is commiting in the system
=======================================================
git init
=>initialize git in local project directory at first

git init directory_name
=>Create a Repository and Directory Together
=======================================================
git status
=>to know the changes happen and currently unstagged files in the local project directory
--------------------------------------------------------

Note: Short status flags are:
?? - Untracked files
A - Files added to stage
M - Modified files
D - Deleted files


git status --short
=>compact view to get idea of changes

=======================================================

git add file_name
=>to stage file where changes happened

git add --all
=>to stage all files where changes happened
or
git add .
=>to stage all files where changes happened
or
git add -A
=>to stage all files where changes happened

git add --ignore-removal 
=>Git allows us to stage only updated and newly created files at once

git add -u  
=> To stage all modified and deleted files only

git add *.java 
=> to add all the same pattern files at once. 

================================================

git reset --hard  
->This option will reset the changes and match the position of the Head before the last changes
It will remove the available changes from the staging area.

reset hard mode performs below operations:
1.It will move the HEAD pointer.
2.It will update the staging Area with the content that the HEAD is pointing.
3.It will update the working directory to match the Staging Area.

git reset --mixed  
->reset the status of the Head, and it will not delete any data from the staging area to match the position of the Head

reset mixed mode performs the below operations:

It will move the HEAD pointer
It will update the Staging Area with the content that the HEAD is pointing to.

git reset --soft <commit-sha>  
-> it is used to change the position of the Head

git reset <option> <commit-sha>  
-> To reset it, git reset command can be used with any option supported by reset command. It will take the default behavior of a particular command and reset the given commit

git reset <filename>
=>To undo an add operation

git reset -hard <remote>/<branch_name>  
->to reset the master branch with updates that you fetched from remote. The hard option is used to forcefully change all the files in the local repository with a remote repository.

git rm <file Name>  
->to remove file from directory

git rm --cached <file name>   
->remove a file from the version control system. The deleted file will remain in the repository.

git cherry-pick <commit id>  
->take commit id from one branch where accidently commit took place and do same commit into another branch

git tag <tag name>  
->command will mark the current status of the project.

git tag 
->list all the tags in the repository

git tag show <tagname>  
->to show details of particular tag

git tag -l "<pattern>.*" ( example:git tag -l "pro*" )
->return list of all commands with some pattern

git tag <tag name> -m "< Tag message>  
->to create tag with message

git push origin <tagname>  
->push the tag to remote

git push origin --tags  
->push all the tags at once

git tag --delete <tagname>  
->delete tag

git push origin --delete<tag name>  
->delete a remote tag name

git tag -d <tag1> <tag2>  
->delete more than one tags

git push origin -d <tag1> <tag2>  
->delete more than one tags from remote

git checkout -b < new branch name> <tag name>  
->create a new branch with the same state of the repository as it is in the tag

git tag <tagname> < reference of commit>
->create a tag from commit id

git remote -v  
->To check the remote server upstream/downstream url

git push --set-upstream origin master  
->set the master branch as the default remote branch

git branch --set-upstream-to origin master  
->set the default remote branch

git branch -vv  
->To display default remote branches

=======================================================
git Commit
=> it will commit but ask message to enter
Press the Esc key and after that 'I' for insert mode. Type a commit message whatever you want. Press Esc after that ':wq' to save and exit from the editor

git commit -a
=>This process will only commit the already added files. It will not commit the files that have not been staged.

git commit -am "Commit message." 
=>This command will immediately make a commit for already staged files with a commit message

git commit -amend  
=> to edit the last commit.

git commit -m "type changes happend in the file"
=>declare save point with message

git commit -a -m "type changes happend in the file"
=>declare save point with message for all files
=====================================================
git show HEAD  
->to check the status of the Head. This command will show the location of the Head.

git show commit_id
->returns commited stats

When Head doesn't point to most recent commit, such state is called detached Head. If you checkout with an older commit, it will stand the detached head condition. 

======================================================

git log
=>to view the commits happens till now for a particular project
->type 'q' to come out again

git log --oneline
=>returns short oneline all commits till now

git log --stat
=>gives whole stat of modification like summary line,modified line

git log --patch
=>shows the modified files, location of the lines that are added or removed

git log --graph
=>To list the commits in the form of a graph

git log --graph --oneline
=>To make the output more specific

git log -n(type number)
=>list only n commits

git log --after="yy-mm-dd"
=>returns all commits happened on yy-mm-dd

git log --after="n days ago"  
=>returns all commits happened n days ago

$ git log --after="yyyy-mm-dd" --before="yyyy-mm-dd"  
=>show all commits happened between this time

$ git log --author="Author name"  
=>show all the commits by author name/email

$ git log --grep=" Commit message."  
=>show all the commits by choosing from commit message of specific type

======================================================

git command_name -help
=>See all the available options for the specific command

git help --all
=>See all possible commands

Note: If you find yourself stuck in the list view, SHIFT + G to jump the end of the list, then q to exit the view.

======================================================

With Git:

With a new branch called new-design, edit the code directly without impacting the main branch

EMERGENCY! There is an unrelated error somewhere else in the project that needs to be fixed ASAP!

Create a new branch from the main project called small-error-fix

Fix the unrelated error and merge the small-error-fix branch with the main branch

You go back to the new-design branch, and finish the work there

Merge the new-design branch with main (getting alerted to the small error fix that you were missing)

======================================================

git branch branch_name
=>create a new branch to update the code

git branch
=>to know list of branches

git branch -d<branch name>  
->In this command, Git prevents you from deleting the branch if it has unmerged changes.

git push origin -delete <branch name>  
->delete a remote branch

git branch -m master  
->move to master Branch

git branch -m <old branch name><new branch name>  
-> rename the branch

======================================================

git checkout branch_name
=>change working branch

Note: Using the -b option on checkout will create a new branch, and move to it, if it does not exist

git checkout -b newbranchname
=>create a new branch and move to it directly

======================================================
merging branches together

1.need to change to the original repository branch
2.now merge new branch code into original using git merge new_branch_name
3.But if there is some conflicts in merging then solve that conflicts and then commit

git merge new_branch_name
=>to merge new branch into the branch where you are present right now

git merge <commit>
->to merge a specified commit

When two branches are trying to merge, and both are edited at the same time and in the same file, Git won't be able to identify which version is to take for changes. Such a situation is called merge conflict. If such a situation occurs, it stops just before the merge commit so that you can resolve the conflicts manually.

git mergetool  
->to solve conflict

To resolve the conflict, enter in the insert mode by merely pressing I key and make changes as you want. Press the Esc key, to come out from insert mode. Type the: w! at the bottom of the editor to save and exit the changes. To accept the changes, use the rebase command.

git rebase --continue 
->to continue after solving conflict
To see that which is the first edited text of the merge conflict in your file, search the file attached with conflict marker <<<<<<<. You can see the changes from the HEAD or base branch after the line <<<<<<< HEAD in your text editor. Next, you can see the divider like =======. It divides your changes from the changes in the other branch, followed by >>>>>>> BRANCH-NAME.
Decide whether you want to keep only your branch's changes or the other branch's changes, or create a new change. Delete the conflict markers <<<<<<<, =======, >>>>>>> and create final changes you want to merge.

======================================================
git rebase <branch name>  
->When you made some commits on a feature branch (test branch) and some in the master branch. You can rebase any of these branches

git rebase --skip
->If you want to skip the change, you can skip

git rebase -i  
->It will list all the available interactive options.it will open an editor with available options.

Git Merge																			Git Rebase
Merging creates a final commit at merging.						Git rebase does not create any commit at rebasing.
It merges all commits as a single commit.						It creates a linear track of commits.
It creates a graphical history that might be a bit complex to understand.				It creates a linear history that can be easily understood.
It is safe to merge two branches.								Git "rebase" deals with the severe operation.
Merging can be performed on both public and private branches.	It is the wrong choice to use rebasing on public branches.
Merging integrates the content of the feature branch with the master branch. So, the master branch is changed, and feature branch history remains consistence.	Rebasing of the master branch may affect the feature branch.
Merging preserves history.	Rebasing rewrites history.
Git merge presents all conflicts at once.						Git rebase presents conflicts one by one.

git rebase -i HEAD ~3 
->to squash previous 3 commits and give a new message

git branch -d newbranchname
=>to delete old branch
======================================================
working with github repository

add files from local drive to github repository

1.create a new repository at github.com

2.execute this command to push local repository to github:
    git remote add origin https://github.com/link......

    git remote
=>providing the remote name as the origin. Origin is the default name for the remote server,

git remote --verbose  
=> providing available remote connections. If a repository contains more than one remote connection, this command will list them all.

git remote add <short name><remote URL> 
->explicitly add a remote for a repository and add a short name to it for easyness

git remote remove <destination>  
 -> remove a remote connection from a repository

git remote rename <old name><new name>  
 ->renaming the remote server name so that you can use a short name in place of the remote server name

git remote show <remote>  
 ->To see additional information about a particular remote.It will result in information about the remote server. It contains a list of branches related to the remote and also the endpoints attached for fetching and pushing.

git remote set-url <remote name><newURL>  
->To change the remote URL

git pull shortname
->pull the repo using shortname without using url

3. push our master branch to the origin url, and set it as the default remote branch:
    git push --set-upstream origin master

git fetch origin
=>fetch the existing repository so that any updated wont be missed

git log origin/master
=>check the commits happened b4 you

git diff origin/master
=>we can also verify by showing the differences between our local master and origin/master

git diff
->we can track the changes that have not been staged.

git diff --staged
->allows us to track the changes that are staged but not committed.

git diff HEAD  
->track the changes after commiting

git diff <commit1-sha> <commit2-sha>  
->track the changes between two commits

git diff <branch 1> < branch 2>  
->tranck the changes between two branches

git merge origin/master
=>merge our current branch (master) with origin/master

git pull origin
=>Use pull to update our local Git

git commit -a -m "message"
=>commit all files directly without staging

git push origin
=>push files to remote repository

git push origin update-readme
=> push the branch from our local Git repository, to GitHub, where everyone can see the changes

git branch -a
=>returns all repository list at remote and local

git branch -r
=>returns all repositories at remote

git checkout -b new_rep_name
=>create a new local branch, and checkout direclty from one command

git add README.md
=>to add readme file

git remote rename origin newname
=>rename origin to new name

============================================================

git clone repo_url
=>to clone the repository to local drive

Note: To specify a specific folder to clone to, add the name of the folder after the repository URL, like this: git clone https://github.com/w3schools-test/w3schools-test.github.io.git myfolder

git clone repo_url "folder_name"  
=>clone url to new folder

git clone -b Branch_name Repository_URL "folder_name"
=> allows making a copy of only a particular branch from a repository. You can make a directory for the individual branch by using the git clone command

But the significant difference is that the fork is used to create a server-side copy, and clone is used to create a local copy of the repository.

===========================================================
revert changes

git revert
->revert records some new changes that are just opposite to previously made commits.

git revert <commit-ish>  
->to revert a commit

git revert -e <commit-ish> 
->to edit the commit message

git revert -n <commit-ish> 
->not open the editor, it will direclty revert the commit

git log --oneline
=>returns short oneline all commits till now

git revert HEAD --no-edit
=> revert the latest commit using git revert HEAD (revert the latest change,  and then commit), adding the option --no-edit to skip the commit message editor (getting the default revert message)

Note: To revert to earlier commits, use git revert HEAD~x (x being a number. 1 going back one more, 2 going back two more, etc.)

git reset hashcode
=>return all files of previous commit having same hashcode as above

Warning: Messing with the commit history of a repository can be dangerous. It is usually ok to make these kinds of changes to your own local repository. However, you should avoid making changes that rewrite history to remote repositories, especially if others are working with them.

git commit --amend -m "Added lines to README.md"
=>ammend previous commit message

Warning: Messing with the commit history of a repository can be dangerous. It is usually ok to make these kinds of changes to your own local repository. However, you should avoid making changes that rewrite history to remote repositories, especially if others are working with them~

===================================================
secure git

To create a .gitignore file, go to the root of your local Git, and create it 
command: touch .gitignore

We are just going to add two simple rules:
1.Ignore any files with the .log extension
2.Ignore everything in any directory named temp

example:
# ignore ALL .log files
*.log

# ignore ALL files in ANY directory named temp
temp/

Now all .log files and anything in temp folders will be ignored by Git.

Note: In this case, we use a single .gitignore which applies to the entire repository.
It is also possible to have additional .gitignore files in subdirectories. These only apply to files or folders within that directory.

It is also possible to ignore files or folders but not show it in the distubuted .gitignore file.

These kinds of ignores are specified in the .git/info/exclude file. It works the same way as .gitignore but are not shown to anyone else.

Rules for putting the pattern in .gitignore file:

The rules for the patterns that can be put in the .gitignore file are as follows:

Git ignores the Blank lines or lines starting with #.
Only the Standard glob patterns work and will be applied recursively throughout the entire working tree.
The patterns can be started with a forward slash (/) to avoid recursively.
The patterns can be ended with a forward slash (/) to specify a directory.
The patterns can be negated by starting it with an exclamation point (!).

git config --global core.excludesfile ~/.gitignore_global 
->To create a global .gitignore for the whole big repository

git ls-files --ignore --exclude-standard  
->To list the ignored file


============================================================

git fetch repository_link
=>To fetch the remote repository

git fetch branch_name repository_link
=>To fetch a particular branch name from the remote repository

git fetch -all
=>to fetch all the branches

git fetch origin
=>to fetch new updates in the same file if updated on remote

git pull
->to pull all updates in local repository

git pull remote_branch_url
->to pull all updates from remote branch url in local repository

git pull remotename branchname
->to share a project or send updates to the remote server

git fetch -all
=>fetch all remote updates without merging

git mergetool
=>Git merge tool command is used to resolve the conflict
============================================================

git stash
=> just save whatever changes happened without commiting the changes in current files

git stash save "message"
=>stash with message

git stash list
=>check the stored stashes

git stash apply 
-> reapply the changes made

git stash apply stash_id
-> In case of more than one stash, you can use "git stash apply" command followed by stash index id to apply the particular commit.

git stash show
->To see the changes in the file before stash and after stash operation

git stash show -p
-> To display the changed content of the file,show the edited files and content.

git stash pop
->re-apply the previous commits to the repository.

git stash drop
->used to delete a stash from the queue. Generally, it deletes the most recent stash.

git stash drop <stash id>
-> To delete a particular stash from the available stashes, pass the stash id in stash drop command.

git stash drop stash@{1} 
->to delete a particular stash with given id

git stash clear 
->To delete all the available stashes

git stash branch <Branch Name>  
->create a new branch and transfer the stashed work on that