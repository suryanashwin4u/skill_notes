==============================================================
                    W3SCHOOLS.COM NOTES
==============================================================

//change the inner html string using id selector
//double or single quotes accepted
document.getElementById("id_name").innerHTML = "type_string_here";

//can be declared like this
document.getElementById("demo").innerHTML = "Hello Dolly!";

//calculate and print
document.getElementById("demo").innerHTML = 5 + 6;

//print at browser window
document.write("type_string_here");

//print sum but remove all previous content in webpage
document.write(5 + 6);
<button type="button" onclick="document.write(5 + 6)">Try it</button>

//to show alert message
//window object is the global scope object, that means that variables, properties, and methods by default belong to the window object
alert(5 + 6); or window.alert("test");

//to print at console
//use it for debugging purpose
console.log("helloworld");

//change src attribute using id selector
document.getElementById("id_name").src='image.gif';

//change styles using id selector
document.getElementById("demo").style.fontSize = "35px";

//to hide element using id selector
document.getElementById("demo").style.display = "none";

//to show element using id selector
document.getElementById("demo").style.display = "block";

//include script from same folder
//Placing scripts at the bottom of the <body> element improves the display speed, because script interpretation slows down the display.
<script src="myScript.js"><script>

//external files javascript content defined in this way
function myFunction() {
  document.getElementById("demo").innerHTML = "Paragraph changed.";
}

//include script from other server
<script src="https://www.w3schools.com/js/myScript1.js"><script>

//include script from different folder in same directory
<script src="/js/myScript1.js"><script>

//define function in js and include in the same page
<script>
function myFunction() {
  document.getElementById("demo1").innerHTML = "Hello Dolly!";
  document.getElementById("demo2").innerHTML = "How are you?";
}
<script>

//js support different lines
document.getElementById("demo").innerHTML =
"Hello Dolly!";

//click button, calculate and then print
<button type="button" onclick="document.write(5 + 6)"><button>

//print the screen on button click
<button onclick="window.print()"><button>

//declare variables
var x, y, z;    
x = 5;        
y = 6;          
z = x + y;  

var person = "Hege";    

var person='Hege';    //js ignore spaces

var x = y + z;

var a = 5; b = 6; c = a + b;    //same line

let x = y + z;

let x;
x = 1;

let x,y;
x=1;y=2;

//looks same but different variables as of upper case letter
var lastname, lastName;
lastName = "Doe";
lastname = "Peterson";

//general rules for creating variables:
.Names can contain letters, digits, underscores, and dollar signs
.Names must begin with a alphabet letter,$,_
.Names are case sensitive
.Keywords cannot be used as variable names
.Hyphens are not allowed
.Underscores are allowed
.Upper Camel Case allowed
.Lower Camel Case Allowed

//rules for js keywords
.JavaScript does not interpret LET or Let as the keyword let.

//unicode
JavaScript uses the Unicode character set.
Unicode covers (almost) all the characters, punctuations, and symbols in the world.

//comments 
. use // 
. use /* .... */ 
. used to prevent code execution

//when to use var,let,const
.use const when variable cant change its value through out execution
.

//declare many variables on the same line and ending with semicolon
var person = "John Doe", carName = "Volvo", price = 200;

//declare many variables using comma on different lines and ending with semicolon
var person = "John Doe",
carName = "Volvo",
price = 200;

//undefined variable
var carName;

//redeclaring possible only using 'var' but not with 'const' and 'let' 
var carName = "Volvo";
var carName;

//calculations or string concatenation from left to right
var x = 5 + 2 + 3;
var x = "John" + " " + "Doe";
var x = "5" + 2 + 3;  ==> 523
var x = 2 + 3 + "5";  ==> 55

//dollars can be used as identifiers
professional programmers often use it as an alias for the main function in a JavaScript library.
var $$$ = "Hello World";
var $ = 2;
var $myvar=10;

//underscore can be used as an identifier
professional programmers is to use it as an alias for "private (hidden)" variables.
var _lastName = "Johnson";
var _x = 2;
var _100 = 5;

//var variables cannot restrict access outside the block
var x = 10;
// Here x is 10
{
  var x = 2;
  // Here x is 2
}
// Here x is 2

var i = 5;
for (var i = 0; i < 10; i++) {
// some statements
}
// Here i is 10

//let helps restrict access outside the block
var x = 10;
// Here x is 10
{
  let x = 2;
  // Here x is 2
}
// Here x is 10

//both let and var has global scope
let i = 5;
var y = 5;
for (let i = 0; i < 10; i++){
}
// Here i and y are 5

//both var or let declared inside function have only function scope
function myFunction() {
  var carName = "Volvo";   // Function Scope
  let carName = "Volvo";   // Function Scope
}

//var variables can be accessed with windows object but with let we cannot do the same
var carName = "Volvo";
window.carName;

//redeclaring a var variable using let is not allowed
var x = 2;       // Allowed
let x = 3;       // Not allowed
{
  var x = 4;   // Allowed
  let x = 5   // Not allowed
}

//redeclaring let variables is not allowed in the same block
let x = 2;       // Allowed
let x = 3;       // Not allowed
{
  let x = 4;   // Allowed
  let x = 5;   // Not allowed
}

//redeclaring a let variable using var variable is not allowed
let x = 2;       // Allowed
var x = 3;       // Not allowed
{
  let x = 4;   // Allowed
  var x = 5;   // Not allowed
}

//different scopes is possible using let 
let x = 2;     // Allowed
{
  let x = 3;   // Allowed
}
{
  let x = 4;   // Allowed
}

//cant use let after assignment 
try {
  carName = "Volvo";	
  let carName;			//not allowed
  document.getElementById("demo").innerHTML = carName;
}
catch(err) {
//err object
  document.getElementById("demo").innerHTML = err.name + ":" + err.message;
}

//cant be reassigned
const PI = 3.141592653589793;
PI = 3.14;      // error
PI = PI + 10;   // error

//scope of const works same like let
var x = 10;
// Here x is 10
{
  const x = 2;
  // Here x is 2
}
// Here x is 10

//const variables should be assigned inline directly
const PI = 3.14159265359;

//object values can be changed even declared with const
const car = {type:"Fiat", model:"500", color:"white"};
car.color = "red";
car.owner = "Johnson";

//const object once defined cant be reassigned
const car = {type:"Fiat", model:"500", color:"white"};
CAR = {type:"Volvo", model:"EX60", color:"red"};    // ERROR

//const arrays can be updated
const cars = ["Saab", "Volvo", "BMW"];
cars[0] = "Toyota";
cars.push("Audi");

//const array cant be reassigned
const cars = ["Saab", "Volvo", "BMW"];
CARS = ["Toyota", "Volvo", "Audi"];    // ERROR

//reassigning const values is not allowed
var x = 2;         // Allowed
const x = 2;       // Not allowed
{
  let x = 2;     // Allowed
  const x = 2;   // Not allowed
}

//redeclaration is not allowed in same scope
const x = 2;       // Allowed
const x = 3;       // Not allowed
x = 3;             // Not allowed
var x = 3;         // Not allowed
let x = 3;         // Not allowed
{
  const x = 2;   // Allowed
  const x = 3;   // Not allowed
  x = 3;         // Not allowed
  var x = 3;     // Not allowed
  let x = 3;     // Not allowed
}

//const can be declared like let in different blocks
const x = 2;     // Allowed
{
  const x = 3;   // Allowed
}
{
  const x = 4;   // Allowed
}

//const declared after assignment will produce error
carName = "Volvo";
const carName;		//not allowed

//Variables defined with var are hoisted to the top and can be initialized at any time.
carName = "Volvo";
var carName;

Operator	Description
+	        Addition
-	        Subtraction
*	        Multiplication
**	      Exponentiation (ES2016)
/	        Division
%	        Modulus (Division Remainder)
++	      Increment
--	      Decrement

Multiplication (*) and division (/) have higher precedence than addition (+) and subtraction (-).
When using parentheses, the operations inside the parentheses are computed first.
When many operations have the same precedence (like addition and subtraction), they are computed from left to right:

Operator	Example	Same As
=	        x = y	  x = y
+=	      x += y	x = x + y
-=	      x -= y	x = x - y
*=	      x *= y	x = x * y
/=	      x /= y	x = x / y
%=	      x %= y	x = x % y
**=	      x **= y	x = x ** y

Operator	Description
==	      equal to
===	      equal value and equal type
!=	      not equal
!==	      not equal value or not equal type
>	        greater than
<	        less than
>=	      greater than or equal to
<=	      less than or equal to
?	        ternary operator

Operator	Description
&&	      logical and
||	      logical or
!	        logical not

Operator	  Description
typeof	    Returns the type of a variable
instanceof	Returns true if an object is an instance of an object type

Operator	Description
&	        AND	
|	        OR	
~	        NOT	
^	        XOR	
<<	      left shift	
>>	      right shift	
>>>	      unsigned right shift

//string concatenation
var txt1 = "John";
var txt2 = "Doe";
var txt3 = txt1 + " " + txt2;	

var txt1 = "What a very ";
txt1 += "nice day";

var y = "5" + 5;			//55
var z = "Hello" + 5;		//Hello5
var x = 16 + "Volvo";		//16Volvo
var x = "16" + "Volvo";		//16Volvo
var x = 16 + 4 + "Volvo";   //20Volvo
var x = "Volvo" + 16 + 4;   //Volvo164

//exponentation works like pow function in Math class
var x = 5;
var z = x ** 2;          // result is 25
var z = Math.pow(x,2);   // result is 25

//using single and double quotes
var carName1 = "Volvo XC60";   			      // Using double quotes
var carName2 = 'Volvo XC60';   			      // Using single quotes
var answer1 = "It's alright";             // Single quote inside double quotes
var answer2 = "He is called 'Johnny'";    // Single quotes inside double quotes
var answer3 = 'He is called "Johnny"';    // Double quotes inside single quotes
var y = 123e5;      					            // 12300000
var z = 123e-5;     					            // 0.00123

//returns true or false
(x == y)       // Returns true
(x == z)       // Returns false

//array declaration
var cars = ["Saab", "Volvo", "BMW"];

//objects declaration
var person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
//or
var person = {
  firstName: "John",
  lastName : "Doe",
  id       : 5566,
  fullName : function() {
    return this.firstName + " " + this.lastName;
  }
};

//method without the () parentheses, it will return the function definition here 
document.getElementById("demo").innerHTML = person.fullName;

//accessing objects
objectName.propertyName;
//or
objectName["propertyName"];

//try not to use objects as it slows down the execution
var x = new String();        // Declares x as a String object
var y = new Number();        // Declares y as a Number object
var z = new Boolean();       // Declares z as a Boolean object

//type of returns datatype
typeof ""             		 // Returns "string"
typeof "John"                // Returns "string"
typeof "John Doe"            // Returns "string"
typeof 0                     // Returns "number"
typeof 314                   // Returns "number"
typeof 3.14                  // Returns "number"
typeof (3)                   // Returns "number"
typeof (3 + 4)               // Returns "number"
typeof true                  // Returns "boolean"
typeof false                 // Returns "boolean"
typeof x                     // Returns "undefined" 
typeof undefined             // Returns "undefined"
typeof null                  // Returns "object"
typeof {name:'John', age:34} // Returns "object"
typeof [1,2,3,4]             // Returns "object"
typeof function myFunc(){}   // Returns "function"

// Value is undefined, type is undefined
var car;    
car = undefined;

// The value is "", the typeof is "string"
var car = "";    

//null is an object type
person = null;   

//null value and type is undefined here
person=undefined;

//check null or undefined
null === undefined         // false
null == undefined          // true

//accessing a function without () will reassign the code at the give function name
function toCelsius(f) {
  return (5/9) * (f-32);
}
document.getElementById("demo").innerHTML = toCelsius; //it will assign function defination here

//local variable inside the function
function myFunction() {
  var carName = "Volvo";
  // code here CAN use carName
}

//event onclick
<button onclick="document.getElementById('demo').innerHTML = Date()">The time is?<button>
<button onclick="this.innerHTML = Date()">The time is?<button>
<button onclick="displayDate()">The time is?<button>

Event				  Description
-----------------------------------------------------------------
onchange	  |	An HTML element has been changed
onclick		  |	The user clicks an HTML element
onmouseover	|	The user moves the mouse over an HTML element
onmouseout	|	The user moves the mouse away from an HTML element
onkeydown	  |	The user pushes a keyboard key
onload		  |	The browser has finished loading the page

//string variables
var carName1 = "Volvo XC60";   			  // Using double quotes
var carName2 = 'Volvo XC60';   			  // Using single quotes
var answer1 = "It's alright";             // Single quote inside double quotes
var answer2 = "He is called 'Johnny'";    // Single quotes inside double quotes
var answer3 = 'He is called "Johnny"';    // Double quotes inside single quotes

Code	Result	Description
\'	    '	    Single quote
\"	    "	    Double quote
\\	    \	    Backslash

Code	Result
\b	  Backspace
\f	  Form Feed
\n	  New Line
\r	  Carriage Return
\t	  Horizontal Tabulator
\v	  Vertical Tabulator

//use escape characters
var x = "We are the so-called \"Vikings\" from the north."; 
var x = 'It\'s alright.';
var x = "The character \\ is called backslash.";

document.getElementById("demo").innerHTML = "Hello \
Dolly!";

document.getElementById("demo").innerHTML = "Hello " +
"Dolly!";

document.getElementById("demo").innerHTML = \
"Hello Dolly!";

//x==y will be true but x===y will be false as same values but different types
var x = "John";   
var y = new String("John"); // string objects

//(x === y) false as different reference but same type
let x = new String("John");
let y = new String("John");

//(x == y) false as different reference
let x = new String("John");
let y = new String("John");

//to know the length of the string
str="Helloworld";

All string methods return a new string. They don't modify the original string.

//length property
var sln = str.length;

//get starting indexof the given word in a string else returns -1
var pos = str.indexOf("locate");

//get lastindexof the given word in a string else returns -1
var pos = str.lastIndexOf("locate");

//to start search from starting position
var pos = str.indexOf("locate", 15);

//The lastIndexOf() methods searches backwards (from the end to the beginning), meaning: if the second parameter is 15, the search starts at position 15, and searches to the beginning of the string.
//to start search from the end position
var pos = str.lastIndexOf("locate", 15);

//search substring in a string
var pos = str.search("locate");

// The search() method cannot take a second start position argument.
// The indexOf() method cannot take powerful search values (regular expressions).

//slice the string starting from 7th and ends at 12th positions
var res = str.slice(7, 13);

//slice the string starting from -12th and ends at -5th positions
var res = str.slice(-12, -6);

//starts slicing from 7th position and ends when string ends
var res = str.slice(7);

//starts slicing from -12th position and ends when string ends
var res = str.slice(-12);

//get substring from 7th to 12th but it cant accept negative values
var res = str.substring(7, 13);

//starting from 7 to rest of the string
var res = str.substring(7);

//here 1st parameter is starting position and 2nd parameter is length of substring to cut
var res = str.substr(7, 6);

//starting position to end of the string
var res = str.substr(7);

//substring cuts from -4th position to complete end
var res = str.substr(-4);

The replace() method does not change the string it is called on.
The replace() method returns a new string.
The replace() method replaces only the first match.
If you want to replace all matches, use a regular expression with the /g flag set.
By default, the replace() method is case sensitive.

//replace the substring in a string
var n = str.replace("Microsoft", "W3Schools");

//it will not work if string contains lowercase words
var n = str.replace("MICROSOFT", "W3Schools");	//dont work

//it will now work if string contains lowercase words
var n = str.replace(/MICROSOFT/i, "W3Schools");	//i for insensitive

//replace all words with the same name
var n = str.replace(/Microsoft/g, "W3Schools");	//g for global

//change into uppercase
var text2 = text1.toUpperCase();  

//change into lowercase
var text2 = text1.toLowerCase();  

//to concatenate
var text3 = text1.concat(" ", text2);
var text = "Hello".concat(" ", "World!");
text = "Hello" + " " + "World!";

//trim to remove space in the string
var str = "       Hello World!        ";
str.trim();

//to add at the starting
let str = "5";
str = str.padStart(4,0);
// result is 0005

//to add at the ending
let str = "5";
str = str.padEnd(4,0);
// result is 5000

//return character,character code of string characters at given location
var str = "HELLO WORLD";
str.charAt(0);        //return character 
str.charCodeAt(0);    //return character code utf-18
str[0] = "A";         //gives no error,but does not work

Property access might be a little unpredictable:

It makes strings look like arrays (but they are not)
If no character is found, [ ] returns undefined, while charAt() returns an empty string.
It is read only. str[0] = "A" gives no error (but does not work!)

//convert string into array
var txt = "a,b,c,d,e";   // String
txt.split(",");          // Split on commas
txt.split(" ");          // Split on spaces
txt.split("|");          // Split on pipe
txt.split("");           // Split in characters

//The match() method searches a string for a match against a regular expression, and returns the matches, as an Array object.
//return only the first match in the string.
let text = "The rain in SPAIN stays mainly in the plain";
text.match(/ain/g);
text.match(/ain/gi);  //case insensitive

//check match in a string and return true and false
text.includes("world");       //2nd argument is bydefault 0
text.includes("world", 12);   //2nd argument is starting search position

//check a string starts with the word and returns true or false
text.startsWith("Hello");
text.startsWith("world", 5)    // Returns false

//checks a string ends with the word and returns true or false
text.endsWith("Doe");
text.endsWith("world", 11);

//use backticks
let text = `Hello World!`;
let text = `He's often called "Johnny"`;
let text =
`The quick
brown fox
jumps over
the lazy dog`;


//string interpolation:Automatic replacing of variables with real values is called string interpolation.
let text = `Welcome ${firstName}, ${lastName}!`;
let total = `Total: ${(price * (1 + VAT)).toFixed(2)}`;

let header = "Templates Literals";
let tags = ["template literals", "javascript", "es6"];

let html = `<h2>${header}</h2><ul>`;
for (const x of tags) {
  html += `<li>${x}</li>`;
}
html += `</ul>`;

//representing numbers
var x = 3.14;    // A number with decimals
var y = 3;       // A number without decimals
var x = 123e5;    // 12300000
var y = 123e-5;   // 0.00123
var x = 999999999999999;   // x will be 999999999999999
var y = 9999999999999999;  // y will be 10000000000000000
var x = 0.2 + 0.1;         // x will be 0.30000000000000004
var x = (0.2 * 10 + 0.1 * 10) / 10;       // x will be 0.3

var x = 10;
var y = 20;
var z = x + y;           // z will be 30 (a number)

var x = "10";
var y = "20";
var z = x + y;           // z will be 1020 (a string)

var x = 10;
var y = "20";
var z = x + y;           // z will be 1020 (a string)

var x = "10";
var y = 20;
var z = x + y;           // z will be 1020 (a string)

var x = 10;
var y = 20;
var z = "The result is: " + x + y;	//1020

var x = 10;
var y = 20;
var z = "30";
var result = x + y + z;	//3030

var x = "100";
var y = "10";
var z = x / y;       // z will be 10


var x = "100";
var y = "10";
var z = x * y;       // z will be 1000


var x = "100";
var y = "10";
var z = x - y;       // z will be 90


var x = "100";
var y = "10";
var z = x + y;       // z will not be 110 (It will be 10010)


var x = 100 / "Apple";  // x will be NaN (Not a Number)

var x = 100 / "10";     // x will be 10

var x = 100 / "Apple";
isNaN(x);               // returns true because x is Not a Number

var x = NaN;
var y = 5;
var z = x + y;         // z will be NaN

var x = NaN;
var y = "5";
var z = x + y;         // z will be NaN5

typeof NaN;            // returns "number"

var myNumber = 2;
while (myNumber != Infinity) {   // Execute until Infinity
  myNumber = myNumber * myNumber;
}

var x =  2 / 0;       // x will be Infinity
var y = -2 / 0;       // y will be -Infinity

typeof Infinity;     // returns "number"

var x = 0xFF;        // x will be 255

var myNumber = 32;
myNumber.toString(10);  // returns 32
myNumber.toString(32);  // returns 10
myNumber.toString(16);  // returns 20
myNumber.toString(8);   // returns 40
myNumber.toString(2);   // returns 100000

var x = 123;			        // typeof x returns number
var y = new Number(123);  // typeof y returns object

// (x === y) is false because x and y have different types
var x = 500;             
var y = new Number(500); 

// (x == y) is false because objects cannot be compared
var x = new Number(500);             
var y = new Number(500);


var x = 123;
x.toString();            // returns 123 from variable x
(123).toString();        // returns 123 from literal 123
(100 + 23).toString();   // returns 123 from expression 100 + 23


var x = 9.656;
x.toExponential(2);     // returns 9.66e+0
x.toExponential(4);     // returns 9.6560e+0
x.toExponential(6);     // returns 9.656000e+0


var x = 9.656;
x.toFixed(0);           // returns 10
x.toFixed(2);           // returns 9.66
x.toFixed(4);           // returns 9.6560
x.toFixed(6);           // returns 9.656000


var x = 9.656;
x.toPrecision();        // returns 9.656
x.toPrecision(2);       // returns 9.7
x.toPrecision(4);       // returns 9.656
x.toPrecision(6);       // returns 9.65600

//The valueOf() method is used internally in JavaScript to convert Number objects to primitive values.
var x = 123;
x.valueOf();            // returns 123 from variable x
(123).valueOf();        // returns 123 from literal 123
(100 + 23).valueOf();   // returns 123 from expression 100 + 23

//to convert into number
Number(true);          // returns 1
Number(false);         // returns 0
Number("10");          // returns 10
Number("  10");        // returns 10
Number("10  ");        // returns 10
Number(" 10  ");       // returns 10
Number("10.33");       // returns 10.33
Number("10,33");       // returns NaN
Number("10 33");       // returns NaN
Number("John");        // returns NaN

//convert date to number in seconds
Number(new Date("2017-09-30"));    // returns 1506729600000

//convert to integer
parseInt("10");         // returns 10
parseInt("10.33");      // returns 10
parseInt("10 20 30");   // returns 10
parseInt("10 years");   // returns 10
parseInt("years 10");   // returns NaN 

//convert to float
parseFloat("10");        // returns 10
parseFloat("10.33");     // returns 10.33
parseFloat("10 20 30");  // returns 10
parseFloat("10 years");  // returns 10
parseFloat("years 10");  // returns NaN

//number object properties
var does not have block scope:
var x = Number.MAX_VALUE;
var x = Number.MIN_VALUE;
var x = Number.POSITIVE_INFINITY;
var x = 1 / 0;
var x = Number.NEGATIVE_INFINITY;
var x = -1 / 0;

var x = Number.NaN;
var x = 100 / "Apple";  // x will be NaN (Not a Number)

var x = 6;
var y = x.MAX_VALUE;    // y becomes undefined

//constant arrays are updatable but cant be reassigned
const variables must be assigned a value when they are declared
const has Block Scope.
const cars = ["Saab", "Volvo", "BMW"];

const cars = [
  "Saab",
  "Volvo",
  "BMW"
];

const cars = [];
cars[0]= "Saab";
cars[1]= "Volvo";
cars[2]= "BMW";

//using object
const cars = new Array("Saab", "Volvo", "BMW");

//access array value
const cars = ["Saab", "Volvo", "BMW"];
let car = cars[0];

//changing an array element
const cars = ["Saab", "Volvo", "BMW"];
cars[0] = "Opel";

//Access the Full Array
const cars = ["Saab", "Volvo", "BMW"];
document.getElementById("demo").innerHTML = cars;

Arrays are a special type of objects. The typeof operator in JavaScript returns "object" for arrays.

//array elements can be objects
myArray[0] = Date.now;
myArray[1] = myFunction;
myArray[2] = myCars;

//array length
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let length = fruits.length;

//access first array element
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fruit = fruits[0];

//access last array element
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fruit = fruits[fruits.length - 1];

//looping using array length
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fLen = fruits.length;
let text = "<ul>";
for (let i = 0; i < fLen; i++) {
  text += "<li>" + fruits[i] + "</li>";
}
text += "</ul>";

//foreach on an array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let text = "<ul>";
fruits.forEach(myFunction);
text += "</ul>";
function myFunction(value) {
  text += "<li>" + value + "</li>";
}

//adding array elements in an array
const fruits = ["Banana", "Orange", "Apple"];
fruits.push("Lemon");  // Adds a new element (Lemon) to fruits

//changing last element of an array
const fruits = ["Banana", "Orange", "Apple"];
fruits[fruits.length] = "Lemon";  // Adds "Lemon" to fruits

//creating holes in an array
const fruits = ["Banana", "Orange", "Apple"];
fruits[6] = "Lemon";  // Creates undefined "holes" in fruits

If you use named indexes, JavaScript will redefine the array to an object.
const person = [];
person["firstName"] = "John";
person["lastName"] = "Doe";
person["age"] = 46;
person.length;     // Will return 0
person[0];         // Will return undefined

In JavaScript, arrays use numbered indexes.  
In JavaScript, objects use named indexes.
(associative array can be implemented in js using objects)

//both are same (creating array object)
const points = new Array();
const points = [];
const points = new Array(40, 100, 1, 5, 25, 10);
const points = [40, 100, 1, 5, 25, 10];

// Create an array with 40 undefined elements:
const points = new Array(40);  
// Create an array with one element:
const points = [40];

//return object
let type = typeof fruits;

//to know an array or not
Array.isArray(fruits);

//to know an array or not
const fruits = ["Banana", "Orange", "Apple"];
fruits instanceof Array;

//to convert object or array to string
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.toString();

//to join array elements and create string with a given separator
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.join(" * ");

//get last element of an array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let element = fruits.pop();

//push into an end of an array and return length
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let length = fruits.push("Kiwi");

//get first element and shift other towards first element
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let firstElement = fruits.shift();

//unshift adds one element at the starting and shift other to highest indexes
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let length = fruits.unshift("Lemon");

//get last element using length operator
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits[fruits.length] = "Kiwi";

//to delete array element but leaves holes instead use pop() or shift()
const fruits = ["Banana", "Orange", "Apple", "Mango"];
delete fruits[0];

//concatenate many arrays together and return a new array
const arr1 = ["Cecilie", "Lone"];
const arr2 = ["Emil", "Tobias", "Linus"];
const arr3 = ["Robin", "Morgan"];
const myChildren = arr1.concat(arr2, arr3);
const myChildren = arr1.concat("Peter");

//splice adds elements as per user choice and return new array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
//(where new elements added,how many elements to remove,rest elements)
const newFruitsArray = fruits.splice(2, 0, "Lemon", "Kiwi"); 
//delete first element without leaving holes
fruits.splice(0, 1); 

//remove one element from starting and return rest elements
const citrus = fruits.slice(1);

//remove one element from starting and 2 from ending then return rest elements
const citrus = fruits.slice(1, 3);

//both convert array to string
document.getElementById("demo").innerHTML = fruits.toString();
document.getElementById("demo").innerHTML = fruits;

//sort alphabatically and reverse for string
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.sort();
fruits.reverse();

//sort numbers ascending or descending
const points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return a - b});
let minElement = points[0];
points.sort(function(a, b){return b - a});
let maxElement = points[points.length - 1];

//sort randomly
points.sort(function(a, b){return 0.5 - Math.random()});

//to find max and min element in an array
function myArrayMax(arr) {
  return Math.max.apply(null, arr);
}
function myArrayMin(arr) {
  return Math.min.apply(null, arr);
}

//sort array of objects
arrayName.sort(function(obj1, obj2){return obj1.prop - obj2.prop});

//to iterate an array, we can use forEach or map function
const numbers1 = [45, 4, 9, 16, 25];
const numbers2 = numbers1.map(myFunction);
function myFunction(value, index, array) {
  return value * 2;
}

//filter array elements
const numbers = [45, 4, 9, 16, 25];
const over18 = numbers.filter(myFunction);
function myFunction(value, index, array) {
  return value > 18;
}

//to find sum using reduce function, runs left to right
const numbers = [45, 4, 9, 16, 25];
let sum = numbers.reduce(myFunction);
function myFunction(total, value, index, array) {
  return total + value;
}

//it can accept an initial value
const numbers = [45, 4, 9, 16, 25];
let sum = numbers.reduce(myFunction, 100);
function myFunction(total, value) {
  return total + value;
}


//it runs from right to left
const numbers = [45, 4, 9, 16, 25];
let sum = numbers.reduceRight(myFunction);
function myFunction(total, value, index, array) {
  return total + value;
}

//return true or false after condition check on full array elements
const numbers = [45, 4, 9, 16, 25];
let allOver18 = numbers.every(myFunction);
function myFunction(value, index, array) {
  return value > 18;
}

//return true or false if some elements pass the test
const numbers = [45, 4, 9, 16, 25];
let someOver18 = numbers.some(myFunction);
function myFunction(value, index, array) {
  return value > 18;
}

//find the first element which pass the test
const numbers = [4, 9, 16, 25, 29];
let first = numbers.find(myFunction);
function myFunction(value, index, array) {
  return value > 18;
}

//find the index of first element which passes the test
const numbers = [4, 9, 16, 25, 29];
let first = numbers.findIndex(myFunction);
function myFunction(value, index, array) {
  return value > 18;
}

//create an array from a string
Array.from("ABCDEFG");

//returns array keys
const fruits = ["Banana", "Orange", "Apple", "Mango"];
const keys = fruits.keys();
for (let x of keys) {
  text += x + "<br>";
}

//returns array keys and values
const fruits = ["Banana", "Orange", "Apple", "Mango"];
const f = fruits.entries();
for (let x of f) {
  document.getElementById("demo").innerHTML += x;
}

//block scope and reinitialization issue
var cars = ["Volvo", "BMW"];     // Allowed
const cars = ["Volvo", "BMW"];   // Not allowed
{
  var cars = ["Volvo", "BMW"];   // Allowed
  const cars = ["Volvo", "BMW"]; // Not allowed
}

const cars = ["Volvo", "BMW"];   // Allowed
const cars = ["Volvo", "BMW"];   // Not allowed
var cars = ["Volvo", "BMW"];     // Not allowed
cars = ["Volvo", "BMW"];         // Not allowed
{
  const cars = ["Volvo", "BMW"]; // Allowed
  const cars = ["Volvo", "BMW"]; // Not allowed
  var cars = ["Volvo", "BMW"];   // Not allowed
  cars = ["Volvo", "BMW"];       // Not allowed
}

const cars = ["Volvo", "BMW"];   // Allowed
{
  const cars = ["Volvo", "BMW"]; // Allowed
}
{
  const cars = ["Volvo", "BMW"]; // Allowed
}

//to know current date and time
new Date()
new Date(year, month, day, hours, minutes, seconds, milliseconds)
new Date(milliseconds)
new Date(date string) 

//return a string with date and time
7 numbers specify year, month, day, hour, minute, second, and millisecond (in that order):
6 numbers specify year, month, day, hour, minute, second:
5 numbers specify year, month, day, hour, and minute:
4 numbers specify year, month, day, and hour:
3 numbers specify year, month, and day:
2 numbers specify year and month:
If you supply only one parameter it will be treated as milliseconds.
const d = new Date(2018, 11, 24, 10, 33, 30, 0);

One and two digit years will be interpreted as 19xx:
const d = new Date(99, 11, 24);

const d = new Date(9, 11, 24);

//create a date object from a string
const d = new Date("October 13, 2014 11:13:00");

//new Date(milliseconds) creates a new date object as zero time plus milliseconds:
const d = new Date(0);
const d = new Date(-100000000000);
//convert date object to string
d.toString();
d.toUTCString();
d.toDateString();
d.toISOString();


Type	Example
ISO Date	"2015-03-25" (The International Standard)
Short Date	"03/25/2015"
Long Date	"Mar 25 2015" or "25 Mar 2015"

const d = new Date("2015-03-25");
const d = new Date("2015-03");
const d = new Date("2015");
const d = new Date("2015-03-25T12:00:00Z");
If you want to modify the time relative to UTC, remove the Z and add +HH:MM or -HH:MM instead:
const d = new Date("2015-03-25T12:00:00-06:30");
const d = new Date("03/25/2015");




getFullYear()	Get the year as a four digit number (yyyy)
getMonth()	Get the month as a number (0-11)
getDate()	Get the day as a number (1-31)
getHours()	Get the hour (0-23)
getMinutes()	Get the minute (0-59)
getSeconds()	Get the second (0-59)
getMilliseconds()	Get the millisecond (0-999)
getTime()	Get the time (milliseconds since January 1, 1970)
getDay()	Get the weekday as a number (0-6)
Date.now()	Get the time. ECMAScript 5.
getUTCDate()	Same as getDate(), but returns the UTC date
getUTCDay()	Same as getDay(), but returns the UTC day
getUTCFullYear()	Same as getFullYear(), but returns the UTC year
getUTCHours()	Same as getHours(), but returns the UTC hour
getUTCMilliseconds()	Same as getMilliseconds(), but returns the UTC milliseconds
getUTCMinutes()	Same as getMinutes(), but returns the UTC minutes
getUTCMonth()	Same as getMonth(), but returns the UTC month
getUTCSeconds()	Same as getSeconds(), but returns the UTC seconds



setDate()	Set the day as a number (1-31)
setFullYear()	Set the year (optionally month and day)
setHours()	Set the hour (0-23)
setMilliseconds()	Set the milliseconds (0-999)
setMinutes()	Set the minutes (0-59)
setMonth()	Set the month (0-11)
setSeconds()	Set the seconds (0-59)
setTime()	Set the time (milliseconds since January 1, 1970)


Math.E        // returns Euler's number
Math.PI       // returns PI
Math.SQRT2    // returns the square root of 2
Math.SQRT1_2  // returns the square root of 1/2
Math.LN2      // returns the natural logarithm of 2
Math.LN10     // returns the natural logarithm of 10
Math.LOG2E    // returns base 2 logarithm of E
Math.LOG10E   // returns base 10 logarithm of E

Math.round(x)	Returns x rounded to its nearest integer
Math.ceil(x)	Returns x rounded up to its nearest integer
Math.floor(x)	Returns x rounded down to its nearest integer
Math.trunc(x)	Returns the integer part of x (new in ES6)
Math.sign(x) returns if x is negative, null or positive:
Math.pow(x, y) returns the value of x to the power of y
Math.sqrt(x) returns the square root of x:
Math.abs(x) returns the absolute (positive) value of x











------------------------------------------------------------------
//IMPROVE JS PERFORMANCE

//Reduce Activity in Loops
let l = arr.length;           
for (let i = 0; i < l; i++) {
}

//Reduce DOM Access
const obj = document.getElementById("demo");
obj.innerHTML = "Hello";

//Reduce DOM Size
Keep the number of elements in the HTML DOM small.
This will always improve page loading, and speed up rendering (page display), especially on smaller devices.

//Avoid Unnecessary Variables
document.getElementById("demo").innerHTML = firstName + " " + lastName;

//Delay JavaScript Loading
An alternative is to use defer="true" in the script tag. The defer attribute specifies that the script should be executed after the page has finished parsing, but it only works for external scripts.

//Avoid Using with keyword
It has a negative effect on speed. It also clutters up JavaScript scopes.
The with keyword is not allowed in strict mode.

==============================================================
                    JAVATPOINT.COM NOTES
==============================================================
features of JavaScript:

All popular web browsers support JavaScript as they provide built-in execution environments.
JavaScript follows the syntax and structure of the C programming language. Thus, it is a structured programming language.
JavaScript is a weakly typed language, where certain types are implicitly cast (depending on the operation).
JavaScript is an object-oriented programming language that uses prototypes rather than using classes for inheritance.
It is a light-weighted and interpreted language.
It is a case-sensitive language.
JavaScript is supportable in several operating systems including, Windows, macOS, etc.
It provides good control to the users over the web browsers.

following benefits if a user creates an external javascript:

It helps in the reusability of code in more than one HTML file.
It allows easy code readability.
It is time-efficient as web browsers cache the external js files, which further reduces the page loading time.
It enables both web designers and coders to work with html and js files parallelly and separately, i.e., without facing any code conflictions.
The length of the code reduces as only we need to specify the location of the js file.

following disadvantages of external files:

The stealer may download the coder's code using the url of the js file.
If two js files are dependent on one another, then a failure in one file may affect the execution of the other dependent file.
The web browser needs to make an additional http request to get the js code.
A tiny to a large change in the js code may cause unexpected results in all its dependent files.
We need to check each file that depends on the commonly created external javascript file.
If it is a few lines of code, then better to implement the internal javascript code.

To declare JavaScript global variables inside function, you need to use window object.
function m(){  
window.value=100;//declaring global variable by window object  
}  





























