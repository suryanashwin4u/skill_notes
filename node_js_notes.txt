nodejs is a server-side platform built on google chrome's js engine.  
it is developed by ryan dahl, 
it uses an event-driven, 
non-blocking i/o model, 
it is lightweight and efficient,
it is perfect for data-intensive real-time applications, 
it uses asynchronous approach of client server communication which means when any number of request can be send to the server without waiting for the response.

check node version installed
==>node -v

check npm version installed
==>npm -v

check npx version installed
==>npx -v

to work on node command prompt
==>node

to clean the command prompt
==>clear

we can execute javascript code inside node command prompt

to abort current expression in node command prompt
==>control + c or .exit 

to exit from node command prompt
==>control + d 

Sometimes you get stuck, this gets you out
==>.break    

Alias for .break
==>.clear    

Enter editor mode
==>.editor   

Exit the REPL
==>.exit     

Print this help message
==>.help     

Load JS from a file into the REPL session
==>.load     

Save all evaluated commands in this REPL session to a file
==>.save     

to create package.json in needed directory
==>npm init

to install lite-server
==>npm install lite-server --save-dev

to start lite-server
==>npm start

to execute javascript code of a file inside node command prompt inside a node project
==>node filename.js

__dirname
==>it is a global variable which is set to the absolute path of the directory containing the currently executing script.==>console.log(__dirname);

__filename
==>it is a global variable which is set to the absolute path of the currently executing script.==>console.log(__filename);

require
==>it is a function which is used to load modules.==>var file = require(./filename.js);

console
==>it is a global object which is used to log messages to the console.

buffer
==>it is a global object which is used to create a buffer.

module
==>it is a global object which is used to create a module.

exports
==>it is a global object which is used to export a module to other files.

To access modules and variables present in another js files in nodejs we use 'export' and 'require' keywords.
for example:

To create a server in nodejs we use 'http' module and its createServer(req,res), res.writeHead(statusCode,statusMessage,headers), res.write(body), Res.end(body), listen(port,hostname,backlog,callback)

for example:
const http=require('http');
const server=http.createServer((req,res)=>{
    res.writeHead(200,{'Content-Type':'text/plain'}); //content-type can be: html,css,js,json,text,plain
    res.write("hello world"); // content sent to the client screen, its content depends on the content-type
    res.end();
}).listen(3000,()=>{
    console.log("server is running on port 3000");
});

nodemon is a tool that helps develop node.js based applications by automatically restarting the node application when file changes in the directory are detected.
nodemon does not require any additional changes to your code or method of development. nodemon is a replacement wrapper for node. To use nodemon, replace the word node on the command line when executing your script.

To install nodemon: 
==>npm install -g nodemon

To run file.js using nodemon:
==>nodemon filename.js  (bydefault nodemon will run on port 3000 and index.js file will be executed)








