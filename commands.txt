		MERN STACK COMMANDS
---------------------------------------------------------------------------------



npm install -g @angular/cli
=to install angular cli

npm install -global @angular/cli@next
=to install next update version

ng -v
=check version

ng
=start angular

ng new app_name
=create an angular app

ng serve
=to run angular app

ng g c folder\file_name
=create folder with files inside app folder

ng g s services\data-service
=create services folder with files

npm i ngx-bootstrap
=add bootstrap files into project

npm install -g npm
=to install npm

npm cache clean -f
=to uninstall npm

npm install -g @angular/cli
=to install angular cli

node -v            
=check node js version

npm -v  
=check npm version

node
=starts js editor at command prompt

{for exit from the console press Ctrl+C or type .exit}

npm init
=it will take some inputs at the begining to create a json file in the folder

then type package name, version no., description,entry point,test command,git repository, keywords, author, licence and click yes( it will create json file)
 
node filename  
=to run javascript file at command prompt

npm install -g nodemon
=install nodemon js

nodemon filename
=to run js files automatically at comand prompt after saving using ctrl+s

npm install express --save
or
npm install express
=to install express js framework 

npm install express-generator -g
=to install express generator globally

express -h
=shows commands and functionality

express --view=pug or ejs (appname)
=it will create a folder with name same as (appname) and inside it installation of template rendering engine files with pug or ejs takes place

npm install
=to install node modules inside ejsapp(appname)

SET DEBUG=(appname):* npm start
=to run template engine at browser localhost

npm install pug
=to install pug template engine

npm install ejs
=to install ejs template engine

npm install twig
=to install twig template engine

npm i nodemon
=to update nodemon version

npm install body-parser
=to install body parser library files for post requests

npm install express-validator
=to install express validator files

npm install mongoose
=install mongoose to work with js object /schemas and work with mongodb

npm install mongodb
=install mongodb

npm install --save multer
=this package is used to validate files that are being uploaded using forms

npm install jsonwebtoken
=this package is used to work on authentication login form

npm install node-localstorage
=this package is used to not use live data....use only localstorage


---------------------------------------------------------------------------------
                 	To start any new mern project
---------------------------------------------------------------------------------

1. make a folder having name of the project.
2. move to the folder.
3. go to command prompt and execute "npm install".
4. again execute "SET DEBUG=project_name:* & npm start" to run at browser.
5. again execute "npm install mongoose" to work on mongo db.
6. again execute "npm install nodemon" to run automatically after saving code.

---------------------------------------------------------------------------------
                  mongodb commands
---------------------------------------------------------------------------------
mongo
=to start mongo server shell

mongodump
=dumping db into directory

mongorestore
=restore from directory to db

cls
=to clear screen

exit
=come back to cmd from mongo db

show dbs
=it shows all database files

use db_name
=to use database from the listed one

show collections
=it shows all collections inside a particular database

db.dropDatabase()
=drop database

db.createCollection('name of the collection')
=create a collection having some name

db.collection_name.insertOne({columns_name: values})
=enter one row of data into collection

db.collection_name.insertMany([{columns_name: values},{columns_name: values},{columns_name: values},{columns_name: values}.....])
=to insert many rows of data at once in a collection

db.collection_name.find({ column_name:values})
=to find a column and value in a collection

db.collection_name.find({ column_name:values }).pretty()
=to display all data in the collection in a pretty format

db.collection_name.find({*****:******}).pretty()
=find a particular row in collection using keywords

db.collection_name.find({"_id":ObjectId("write_id_here")}).pretty()
=find a particular row in a collection using object Id

db.collection_name.find({column_name:{$in:["X","Y"]}}).pretty()
=to find data with particular keywords in a column

db.collection_name.find({column_name:value, column_name:"{$lt or $gt or $lte or $gte:number}}).pretty()
=to find data with column names and less than in other column

db.collection_name.find({column_name: values , column_name:"{$gt:**}}).pretty()
=to find data with column names and greater than in other column

db.collection_name.updateOne({{column_name:value},{$set:{"xxx":"value",column_name:"value"},$currentDate:{lastModified:true})
=to update data one row

db.collection_name.find({ $or:[{column_name: values} , {column_name:{$gt:number}}]}).pretty()
=to find data with column names or greater than in other column

db.collection_name.findOne({"column_name":"********"})
=to find only one row with the column name

db.collection_name.find({},{"***":1,"***":1,"***":1}).pretty()
=returns all columns values that has value 1 given above and neglects others from a collection

db.collection_name.deleteOne({"column_name":"*******"})
=to delete onlly one row with a column name

db.collection_name.deleteMany({"column_name":"*******"})
=to delete only many rows with a column name

db.collection_name.aggregate([{$match:{*****}},{$group:{_id:"$****",total:{$sum:"$****"}}}])
=to aggregate data use match and group keywords using some condition

db.collection_name.distinct("****")
=used to get distinct data based on keywords passed

db.collection_name.aggregate([{$project:{"_id":0,"***":1,"***":1,"***":1}}]).pretty()

=used to arrange values of different dataset that is given in the keywords with 1 and it neglects keywords with values 0

db.collection_name.aggregate([{$project:{"_id":0,"***":0}}]).pretty()

=get all values except above keywords

db.collection_name.aggregate([{$match:{"***":"*****"}},{$lookup:{from:"collection_name",localField:"****",foreignField:"****",as:"****"}}]).pretty()
=join data from collection_name and add into first collection with keyword mentioned after 
as

db.collection_name.find().sort({"*****":1}).pretty()
=sort data in mentioned in keyword in ascending manner


db.collection_name.find().sort({"*****":-1}).pretty()
=sort data in mentioned in keyword in descending manner


db.collection_name.find().skip(**)
=skip rows from beginning 

db.collection_name.sort("****":-1).skip(**)
=sort decendingly and then skip data from beginning

db.collection_name.find().limit(**)
=limit data from till given number of rows

db.collection_name.sort({"item":-number}).limit(number)
=limit data from till given number of rows and sort it reversingly

db.collection_name.sort({"item":number}).limit(number)
=limit data from till given number of rows and sort

db.collection_name.sort({"item":number}).limit(number).skip(number)
=limit data from till given number of rows and sort and skip

db.collection_name.getIndexes()
=get index column details

db.collection_name.createIndex({"column_name":1})
=it changes index column

we can create validation schema using db.collection.interest()....


---------------------------------------------------------------------------------
		dos basic commands
---------------------------------------------------------------------------------
mkdir     = make directory
cd        = change directory
cd ..     = go back into directory



---------------------------------------------------------------------------------
                   	dos react js commands
---------------------------------------------------------------------------------



---------------------------------------------------------------------------------
		dos laravel(php) commands
---------------------------------------------------------------------------------


---------------------------------------------------------------------------------
		dos python commands
---------------------------------------------------------------------------------
1. python.exe pip install --upgrade pip 
=to update python installer package

2. pip install pytest
=to install pytest module

3. pytest -h
=to see help documentation of pytest module

4. pytest test_filename.py
=it test the file and show results

5. pytest test_filename.py -v
=it test the file and show results in more detailed manner

6. py.test
=automatically search the test file in a folder and show test results in cmd prompt

7. ctrl + c
=command to skip operations in command prompt and start new command operation

8. pytest test_filename.py::test_functionname
=to test only a particular function in a test file

9. pytest -v -k "keyword1 or keyword 2"
pytest -v -k "keyword1 and keyword 2"
=to test only those test functions which have both keywords in it or have any 1 of them

10. pytest -v -m markname
=it uses decorators markname in test files to recognise the test cases to execute

11.pytest testfilename -v -x 
=it exits when first testcase fails and shows failed report

12.pytest testfilename -v -x --tb=no
=do not print stack trace in test report

13.pytest testfilename -v --maxfail=number
=exit only after given number of failed tests

14.pytest testfilename -v -rsx
=to show skip reason in summary at command prompt

15.pytest testfilename -v -s
pytest testfilename -v --capture=no
=to print a statement in test function

16.pytest testfilename -v -q
pytest testfilename -q
=it shows only required info at command prompt and hide other unneccesery things

17.


---------------------------------------------------------------------------------
		git commands
---------------------------------------------------------------------------------
To execute git commands , we need to change directory...go to the directory where git projects are present

git help --all
=>to see all commands and features of git

git command_name --help
=>to check all options for a particular command



git --version
=>to check the version

git config --global user.name "type_username"
=>set username

git config --global user.email "type_email"
=>set email

to set the username/e-mail for just the current repo, you can remove global


1. git init
=to initalize git repository in local drive

2. git clone
=to clone and put remote project into local drive

3. git status
=to know the changes made in the project till now

4. git diff filename
=to show the changes took place in the code of the file

5. git add filename
=to add file from red stage to green stage

6. git commit -m "type message"
=locked, finally store into remote server with a message typed inside double quotes

6.1. git commit
=type message on first line of the output and then click esc button and then type :wq at the bottom to commit changes with message(please prefer the above command to do the same process)

7. git log
=to know the commits happen till now

8. git log -number
=to know a particular number of commits

9. git show commit_id
=to know the changes in the file using commit_id

10. git branch
=to know the branch we are currently in

10.1 git branch -r(show all remote branches)/-a(show all branches)

11.git fetch
=to update everything that is new

10.1 git branch branch_name
=create a new branch in local drive

10.2 git checkout branch_name
=change branch

11. git checkout -b branch_name
=to create a new branch and change from master to new branch

12. git checkout master
=to change from sub branch to master branch

13. git merge branch_namegi
=to merge current branch to master branch(need to be in master branch to do this)

14. git branch -d branch_name
=to delete a branch

15. git reset --hard HEAD
=to delete last final commit

16. git reset --soft
=to delete last commit but show code modifications

17.git restore --staged file_name
=to again unstaged the staged file 

18.git pull
=to get file from remote

19.git push
=to save file to remote

20. git remote
=to check remote 
---------------------------------------------------------------------------------
		Upload to remote repository
---------------------------------------------------------------------------------

1.git pull
2.git status
3.git log
4.git commit -m "type message"
5.git push

---------------------------------------------------------------------------------
	git commands to push new project code into new repository
---------------------------------------------------------------------------------

echo "# repository name" >> README.md
git init
git add .
git commit -m "first commit"
git branch -M main
git remote add origin github_repository_link
git push -u origin main

---------------------------------------------------------------------------------
		Bootstrap, Jquery, Js CDN
---------------------------------------------------------------------------------

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

<!-- font-awesome cdn -->
<link rel='stylesheet' href='https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css' />

<!-- jQuery library -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<!-- Popper JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>

<!-- Latest compiled JavaScript -->
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

<!-- jQuery library -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<!-- Popper JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>

<!-- Latest compiled JavaScript -->
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

---------------------------------------------------------------------------------
django commands

1.pip install django
=install django
2.django-admin startproject project_name
=start project in a directory
3.django-admin startapp name
=startapp